<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>WenHuiZhou</title>
  
  <subtitle>perper（打起精神！）</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://wenhui-zhou.github.io/"/>
  <updated>2020-04-20T07:29:24.490Z</updated>
  <id>https://wenhui-zhou.github.io/</id>
  
  <author>
    <name>WenHuiZhou</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>cpp常见的考点</title>
    <link href="https://wenhui-zhou.github.io/2020/04/14/cpp%E5%B8%B8%E8%A7%81%E7%9A%84%E8%80%83%E7%82%B9/"/>
    <id>https://wenhui-zhou.github.io/2020/04/14/cpp常见的考点/</id>
    <published>2020-04-14T08:34:00.000Z</published>
    <updated>2020-04-20T07:29:24.490Z</updated>
    
    <content type="html"><![CDATA[<p>不定时总结cpp可能问到的考点。</p><a id="more"></a><ul><li>全局变量自动初始化，局部变量系统不会对其初始化</li><li>static变量，指在程序生命周期内保持局部（全局）变量的存在，仅仅初始化一次。当static修饰类数据成员的时候，会导致该类成员数据被所有的类所共享。</li><li>extern变量，extern 是用来在另一个文件中声明一个全局变量或函数。</li></ul><h4 id="指针和引用的区别"><a href="#指针和引用的区别" class="headerlink" title="指针和引用的区别"></a>指针和引用的区别</h4><ul><li>引用是变量的别名，内部实现是只读指针</li><li>指针可以是空指针，但是引用必须指向一块合法的内存</li><li>引用一旦被初始化之后，就无法指向另一个对象</li><li>引用必须在创建的时候进行初始化，指针则无所谓</li></ul><p>####函数重载（静态多态）</p><p>指的是类中函数有着同样的函数名，但是函数的<strong>参数列表以及实现不同</strong>。</p><h4 id="多态（动态多态）"><a href="#多态（动态多态）" class="headerlink" title="多态（动态多态）"></a>多态（动态多态）</h4><p>多态指的是调用多态成员时，会根据调用函数对象的不同，来执行不同的函数。如果使用普通函数，一个父类指针，指向子类对象。调用的函数仍然是父类函数。需要对这些函数声明virtual变量，使得父类指针能够正常的调用。</p><p>使用virtual定义函数，即为后期绑定，在函数执行的时候，才根据函数的主体来决定函数执行的定义。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">class Shape &#123;</span><br><span class="line">   protected:</span><br><span class="line">      int width, height;</span><br><span class="line">   public:</span><br><span class="line">      Shape( int a=<span class="number">0</span>, int b=<span class="number">0</span>)</span><br><span class="line">      &#123;</span><br><span class="line">         width = a;</span><br><span class="line">         height = b;</span><br><span class="line">      &#125;</span><br><span class="line">      virtual int area()</span><br><span class="line">      &#123;</span><br><span class="line">         cout &lt;&lt; <span class="string">"Parent class area :"</span> &lt;&lt;endl;</span><br><span class="line">         <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>对于这一类有虚函数的类来说，我们需要给父类加上虚析构函数，他的作用是在你删除父对象指针的时候，函数会调用子类的析构函数，对析构对象内存进行回收。</strong></p><h4 id="虚继承"><a href="#虚继承" class="headerlink" title="虚继承"></a>虚继承</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span><span class="keyword">virtual</span> <span class="keyword">public</span> A&#123;...&#125;</span><br></pre></td></tr></table></figure><p>虚继承解决多重继承问题中，父类二义性，冗余的问题。（菱形继承）</p><h3 id="内存泄漏，内存溢出"><a href="#内存泄漏，内存溢出" class="headerlink" title="内存泄漏，内存溢出"></a>内存泄漏，内存溢出</h3><p><strong>内存泄露</strong>：本意是申请的内存空间没有被正确释放，导致后续程序里这块内存被永远占用（不可达），而且指向这块内存空间的指针不再存在时，这块内存也就永远不可达了，内存空间一直被占用。</p><p><strong>内存溢出：</strong>内存越界，调用栈溢出等，栈内存不足的一种表现。</p><h4 id="接口（纯虚函数）"><a href="#接口（纯虚函数）" class="headerlink" title="接口（纯虚函数）"></a>接口（纯虚函数）</h4><p>即在类的成员函数中，有一些函数是纯虚函数，没有函数的实现，如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">getArea</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>当子类在继承的时候，需要实现该函数。</p><h4 id="C-动态内存"><a href="#C-动态内存" class="headerlink" title="C++动态内存"></a>C++动态内存</h4><p><strong>栈内存：</strong>用于存储函数声明的变量，以及存储代码等，由系统自动分配</p><p><strong>堆内存：</strong>在程序执行过程中，申请的内存空间，通常由程序员分配和回收（new，delete）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span>* pvalue  = <span class="literal">NULL</span>;   <span class="comment">// 初始化为 null 的指针</span></span><br><span class="line">pvalue  = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">20</span>]; <span class="comment">// 为变量请求内存</span></span><br></pre></td></tr></table></figure><h4 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h4><p>设计模式是一套被反复使用多数人知晓，经过分类的代码设计经验总结。</p><h4 id="STL库"><a href="#STL库" class="headerlink" title="STL库"></a>STL库</h4><p>STL主要包括容器和算法，容器分为序列式容器和关联式容器</p><p>序列式容器不一定有序，但是可以被排序，如：vector，list，deque等</p><p>关联式容器，内部是一颗平衡二叉树，如set，map等等</p><p>迭代器提供了一种方法，使我们能够从头到尾遍历整个容器。</p><h4 id="const"><a href="#const" class="headerlink" title="const"></a>const</h4><p>const修饰成员变量，该变量不能被修改，const 函数只能访问const成员函数，不能修改数据成员。</p><p>const在定义指针时的限制范围：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">char greeting[] = 'hello';</span><br><span class="line"><span class="keyword">char</span>* p1 = greeting; <span class="comment">// 指针，指针变量都可以改变</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* p2= greeting; <span class="comment">//指针是变量，指针所指的内容是const</span></span><br><span class="line"><span class="keyword">char</span>* <span class="keyword">const</span> p3 = greeting; <span class="comment">// 指针时const</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* <span class="keyword">const</span> p4 = greeting; <span class="comment">// 指针以及所指的内容均是const</span></span><br></pre></td></tr></table></figure><h4 id="static变量"><a href="#static变量" class="headerlink" title="static变量"></a>static变量</h4><p>函数的static变量在执行此函数时进行初始化，类的static变量在类实例化之前初始化，分配内存。</p><ul><li>修饰普通变量：修改变量的存储区和声明周期，使变量存储在静态区，在main函数之前初始化</li><li>修饰成员变量：所有对象共用一个成员实例，实例在对象生成之前就分类空间了</li><li>修饰成员函数：static成员函数只能访问const变量，即对对象不做任何修改</li></ul><h4 id="this指针"><a href="#this指针" class="headerlink" title="this指针"></a>this指针</h4><ul><li>this指针是隐含于每一个非静态成员函数中的特殊指针，他指向调用该成员函数的那个对象</li><li>this指针是const类型，可以代表当前的对象实例</li></ul><h4 id="inline内联函数"><a href="#inline内联函数" class="headerlink" title="inline内联函数"></a>inline内联函数</h4><ul><li><p>内联函数直接在调用位置将代码展开，省去调用函数的开销，因此内联函数需要形式简单，不应该有for一类的操作。</p></li><li><p>程序员无法确定函数是否真正内联，只能建议编译器内联，最后内联与否还是要编译器来决定。</p></li><li><p>inline可以修饰虚函数，但是只有在编译器知道调用对象是属于哪个类的时候，才可能发生。</p></li></ul><h4 id="struct和class"><a href="#struct和class" class="headerlink" title="struct和class"></a>struct和class</h4><p>struct和class本质的区别在于class数据成员时private，struct数据成员时public的。</p><h4 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h4><p>对数据进行隐藏，同时提供数据访问接口。</p><h4 id="堆和栈的生命周期"><a href="#堆和栈的生命周期" class="headerlink" title="堆和栈的生命周期"></a>堆和栈的生命周期</h4><p>栈：由操作系统自动分配释放 ，存放函数的参数值，局部变量等。其操作方式类似于数据结构中的栈</p><p>堆： 一般由程序员分配释放， 若程序员不释放，程序结束时可能由OS回收，分配方式类似于链表（new，delete操作）</p><h4 id="内存泄漏，指针越界"><a href="#内存泄漏，指针越界" class="headerlink" title="内存泄漏，指针越界"></a>内存泄漏，指针越界</h4><p>动态内存分配时，空间在使用完之后未释放，一直占据着内存，称为内存泄漏。在new一块内存之后，需要用delete释放。</p><p>对指针赋值时，要注意指针赋值时的越界问题。</p><p>为了防止指针出现内存泄漏问题，可以将资源拷贝到auto_ptr,shared_ptr中，用这类资源管理器来管理资源。</p><p>成对的出现new和delete。</p><h4 id="CPP代码执行的过程"><a href="#CPP代码执行的过程" class="headerlink" title="CPP代码执行的过程"></a>CPP代码执行的过程</h4><p><strong>预处理：</strong> 条件编译，宏替换等等</p><p><strong>编译：</strong> 将处理后的语言转化成汇编语言</p><p><strong>汇编：</strong> 将汇编语言转化为目标代码</p><p><strong>链接：</strong> 链接目标代码，生成可执行文件</p><h4 id="CPP创建类的时候，自动生成的代码"><a href="#CPP创建类的时候，自动生成的代码" class="headerlink" title="CPP创建类的时候，自动生成的代码"></a>CPP创建类的时候，自动生成的代码</h4><p>构造函数，析构函数，拷贝析构函数，赋值函数</p><h4 id="智能指针"><a href="#智能指针" class="headerlink" title="智能指针"></a>智能指针</h4><p>包括<code>shared_ptr</code>，<code>unique_ptr</code>,<code>weak_ptr</code>，<code>auto_ptr</code>。share_ptr指多个智能指针共享一个对象。unique_ptr独享一个对象，weak_ptr允许共享，但是不拥有对象。</p><h3 id="Linux常见的指令"><a href="#Linux常见的指令" class="headerlink" title="Linux常见的指令"></a>Linux常见的指令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ps # 查看当前用户的进程</span><br><span class="line">ps aux  # aux 选项查看进程的 CPU 或内存使用量</span><br></pre></td></tr></table></figure><h3 id="Linux-的grep用法"><a href="#Linux-的grep用法" class="headerlink" title="Linux 的grep用法"></a>Linux 的grep用法</h3><p>grep 指令用于查找内容包含指定的范本样式的文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep test *file  # 查找file后缀的文件中，含有test的文件的那一行</span><br></pre></td></tr></table></figure><h3 id="Linux的find指令"><a href="#Linux的find指令" class="headerlink" title="Linux的find指令"></a>Linux的find指令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">find . -name &quot;*jpg&quot; # 找出当前路径，以及当前路径的子目录下所有图片</span><br><span class="line">find . -type f # 将目前目录其其下子目录中所有一般文件列出</span><br></pre></td></tr></table></figure><h3 id="new-delete-malloc-free的区别"><a href="#new-delete-malloc-free的区别" class="headerlink" title="new,delete,malloc,free的区别"></a>new,delete,malloc,free的区别</h3><p>new，delete能够调用对象的构造函数或是析构函数，new，delete是C++的运算符不是库函数。</p><p>malloc，free是C++的库函数，用于申请和释放内存，仅使用于内部数据类型变量，无法调用对象的构造或析构函数。</p><p>delete：只调用一次析构函数</p><p>delete[]：会调用每一个对象的析构函数</p><h3 id="构造函数，析构函数的调用顺序"><a href="#构造函数，析构函数的调用顺序" class="headerlink" title="构造函数，析构函数的调用顺序"></a>构造函数，析构函数的调用顺序</h3><p>定义一个对象时先调用基类的构造函数、然后调用派生类的构造函数</p><p>析构的时候恰好相反：先调用派生类的析构函数、然后调用基类的析构函数。</p><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>给某个目标起别名，相当于直接对对象进行操作</p><h3 id="重载和重写"><a href="#重载和重写" class="headerlink" title="重载和重写"></a>重载和重写</h3><p>重载是参数表不同，重写是子类覆盖了父类的方法</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;不定时总结cpp可能问到的考点。&lt;/p&gt;
    
    </summary>
    
      <category term="effective cpp" scheme="https://wenhui-zhou.github.io/categories/effective-cpp/"/>
    
    
  </entry>
  
  <entry>
    <title>problem summary</title>
    <link href="https://wenhui-zhou.github.io/2020/03/25/problem-summary/"/>
    <id>https://wenhui-zhou.github.io/2020/03/25/problem-summary/</id>
    <published>2020-03-25T03:51:28.000Z</published>
    <updated>2020-04-03T10:44:40.558Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="welcome to my blog,enter password to read." />    <label for="pass">welcome to my blog,enter password to read.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      welcome to my blog,enter password to read.
    
    </summary>
    
      <category term="面试准备" scheme="https://wenhui-zhou.github.io/categories/%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/"/>
    
    
  </entry>
  
  <entry>
    <title>RDSNet</title>
    <link href="https://wenhui-zhou.github.io/2020/03/18/RDSNet/"/>
    <id>https://wenhui-zhou.github.io/2020/03/18/RDSNet/</id>
    <published>2020-03-18T02:53:57.000Z</published>
    <updated>2020-04-27T01:51:00.670Z</updated>
    
    <content type="html"><![CDATA[<p>RDSNet的一个亮点在于同一个网络同时学习目标检测和目标分割，这两个任务相互促进提升模型精度。RDSNet提出了双流结构，分别取学习目标尺度和像素尺度上的物体。同时两条流上的信息相互融合，相互促进各自的训练。object level为pixel level提供了实例信息，为pixel提供一些分割上的先验。pixel level为object level重新定义边框的定位，提升精度。</p><p>在这个结构中，来自两个流的信息是交替融合，即对象层的信息引入实例意识和翻译差异到像素级，像素级的信息-在对象级别细化对象的定位精度作为回报</p><a id="more"></a><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><strong>目标识别</strong>上，找出一个tight bounding box是非常具有挑战的，即要么无法全部选中目标，要么bounding 太大选中过多。</p><p><img src="/Users/zhouwenhui/blog/source/images/nlp/image-20200318110910599.png" alt="image-20200318110910599" style="zoom:40%;"></p><p>一个主要的原因是我们在做边框回归的时候，由于逐点回归并不能直接感知整个对象，因此将这个问题转化为pixel wise更加合理，即根绝mask的大小，找到一个最小的包围盒。</p><p><strong>实例分割</strong>的目的是进一步预测除类别外的每个对象的每像素二值掩码。核心思想是：实例分割时，像素类别是具有实例感知的。如在MASK-RCNN中，mask是根据网络提取出来的单独的proposal来生成的，因此具有整个对象的感知。但是这种方法必须依赖于目标检测的结果。</p><p>通过上面的分析，这里两种任务时能够相互促进的，因此作者提出了RDSNet，一种互惠的目标检测方法和实例分割网络（RDSNet）来利用这两项任务之间的关系。</p><p>RDSNet利用双流结构，即对象流和像素流，同时这两条流的信息相互融合，具体来说，对象流集中在对象级别特征是一个回归的检测器，而像素流关注像素级特征，结构沿用FCN的结构，以保证高分辨率输出。</p><p>为了利用来自对象流的对象级提示，提出了<strong>一个相关模块和一个裁剪模块</strong>，该模块将实例感知和翻译方差特性引入到像素流，并产生实例感知的分割掩码。然后，提出了一种基于掩模的边界求精模块，以减小定位误差像素流，即基于实例掩码生成更精确的边界框。</p><p>RDSNet充分考虑了目标检测和实例分割任务之间的相互关系.与以往的方法相比，它有以下三个优点：1）由RDSNet生成的掩码对不同尺度的对象具有一致的高分辨率；2）由于具有巧妙的裁剪模块，掩码对检测结果的依赖性较小；3）更准确和更准确；更紧密的包围盒是用一种新的像素级公式得到的对象包围盒位置。</p><h3 id="网络结构"><a href="#网络结构" class="headerlink" title="网络结构"></a>网络结构</h3><p><img src="/Users/zhouwenhui/blog/source/images/nlp/image-20200318114954524.png" alt="image-20200318114954524" style="zoom:50%;"></p><h4 id="双流结构"><a href="#双流结构" class="headerlink" title="双流结构"></a>双流结构</h4><p>RDSNet的核心是双流结构，即对象流和像素流。这两条流共用相同的FPN（Lin等人.2017a）主干，然后为每个相应的任务分离。这种平行结构支持对象级和像素级信息的分离以及不同任务的可变分辨率。</p><p><strong>对象流</strong>。对象流侧重于对象级信息，包括对象类别，位置等。可有各种回归的检测器充当（Liu等）。此外，我们还添加了一个与分类和回归分支并行的新分支，以提取每个锚点（或位置）的对象特征。这条流负责产生检测结果，稍后将由像素级信息进一步提取信息（见SEC.3.3）。</p><p><strong>像素流</strong>。像素流的重点是像素级信息，并遵循FCN（2015）的高分辨率输出设计。具体来说，每像素特征是在这个流中提取的，并且用于通过使用对象级信息生成实例掩码（参见SEC.3.2）。</p><p><strong>对象感知：相关性模块</strong></p><p>主要思路是将实例信息融合到像素上来，以便做分割处理：<br>$$<br>M_{o}=\operatorname{softmax}\left(\Psi(U) \star \phi\left(v_{o}\right)\right)<br>$$<br>其中 $v_0$ 表示从obejct stream上的特征，U表示来着像素流的特征，将两个特征映射之后，做一个卷积操作，然后在M0上计算一个pixelwise的交叉熵损失，作为最后loss的一部分。</p><p>其中U的维度为1xdxhxw，v的维度为2xdx1x1，其中2表示当前像素是属于前景还是背景。因此U与v做完卷积之后，得到的维度是2x1xwxh，即每一个位置上有两个值，表示前景和背景的概率。每一个anchor对应一个v，与U做完卷积之后计算softmax得到一个二值图。因此可以发现，网络检测出多少anchor，最终segmentation的时候，就会输出多少张二值图，理论上每一个二值图表示一个对象。</p><p>2xkxdx1x1 representation即表示anchor对象的深层含义。</p><p><strong>翻译改变到翻译不变</strong></p><p>由于上诉相关模块对每一个object生成的mask覆盖了整个图像，由于卷积操作产生了大量的噪声。我们使用一个裁剪模块来克服这个问题。可以利用物体的边框进行裁剪，边框以外的像素设置成背景，但是这种做法又会受到检测结果的影响，因此我们选择裁剪进过扩展后的边框，保证mask对box的依赖比较小。同时扩展后的边框引入了更多的背景，使得背景也容易被区分出来。需要注意的是，我们引入背景的时候也需要保持正负样本的平衡（1:1），可以使用背景像素的OHEM算法。</p><h4 id="由mask得到精确边框"><a href="#由mask得到精确边框" class="headerlink" title="由mask得到精确边框"></a>由mask得到精确边框</h4><p>利用从对象流和像素流中获得的边界框和实例掩码，得到每个对象的更精确的边界框。虽然回归边界框可能包含定位错误，但我们认为它们在一定程度上仍然为对象边界位置提供了合理的先验。因此，我们的提法联合擦除检测和分割结果。</p><h3 id="网络损失函数"><a href="#网络损失函数" class="headerlink" title="网络损失函数"></a>网络损失函数</h3><p>最终的loss：<br>$$<br>L=L_{c l s}+\lambda_{r} L_{r e g}+\lambda_{m} L_{m a s k}<br>$$<br>即分类损失，边框回归损失，相关模块产生的mask损失。</p><h3 id="代码阅读"><a href="#代码阅读" class="headerlink" title="代码阅读"></a>代码阅读</h3><p><strong>数据的组织形式</strong></p><p>GT中segmentation部分采用coco的标注格式，即ploygon多边形的轮廓坐标[x1,y1,x2,y2,x3,y3…]。</p><p>box部分则表明GT中的目标所在的外包围盒。</p><p><strong>dataset部分：</strong> 数据输出为[img, gt_bboxes, gt_labels, gt_masks]</p><p>代码结构：</p><ul><li>backbone: usually an FCN network to extract feature maps, e.g., ResNet, MobileNet.</li><li>neck: the component between backbones and heads, e.g., FPN, PAFPN.</li><li>head: the component for specific tasks, e.g., bbox prediction and mask prediction.</li><li>roi extractor: the part for extracting RoI features from feature maps, e.g., RoI Align.</li></ul><h3 id="评价指标"><a href="#评价指标" class="headerlink" title="评价指标"></a>评价指标</h3><p>IoU：即预测的mask与GT的重叠程度<br>$$<br>I O U(A, B)=\frac{|A \cap B|}{|A \cup B|}<br>$$<br>dice：与IoU相似，也是用来评价与GT的重叠程度：<br>$$<br>\operatorname{dice}(A, B)=\frac{2|A \cap B|}{|A|+|B|}<br>$$<br>相同的结果比值上，dice的值要比IoU稍微大一点。</p><p>COCO数据集的验证方式得到的结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.397</span><br><span class="line">Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.603</span><br><span class="line">Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.499</span><br><span class="line">Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.034</span><br><span class="line">Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.463</span><br><span class="line">Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = -1.000</span><br><span class="line">Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.443</span><br><span class="line">Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.465</span><br><span class="line">Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.467</span><br><span class="line">Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.135</span><br><span class="line">Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.501</span><br><span class="line">Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = -1.000</span><br></pre></td></tr></table></figure><p>其中IoU表示阈值，用于区分正负样本，然后计算precision和recall，得到的结果如上。</p><p>下面是各个模型的指标，可以作为一个baseline，可以说明效果不错。</p><p><img src="/Users/zhouwenhui/blog/source/images/nlp/image-20200320153558364.png" alt="image-20200320153558364" style="zoom:50%;"></p><p>但是这个结果仅仅只是检测的结果，过于segmentation部分的结果并没有。</p><p>这个需要我自己去写一个。</p><p>对于segmentation的指标有：</p><p><strong>pa：</strong> 是标记正确的像素占总像素的比例</p><p><strong>mpa：</strong>每个类别被正确分类像素的比例，之后求所有类的平均</p><p><strong>mIU：</strong>在每个类上求IoU，再求平均</p><p><strong>fwIU：</strong>根据每个类出现的频率为其设置权重，再算IoU</p><p><strong>FCN模型的检测结果如下，可以做为一个baseline</strong></p><p><img src="/Users/zhouwenhui/blog/source/images/nlp/image-20200320152311238.png" alt="image-20200320152311238" style="zoom:50%;"></p><p>验证集574张图片，能够检测出人的图像有：384张</p><p>验证后指标分别如下：</p><p>pa: 0.9326967388628634</p><p>person pa: 0.948784433562702; ski pa 0.7863983575482737</p><p>person mIU: 0.8811813306596593; ski mIU 0.47062399967040647</p><p><strong>人体倒立的效果不好：</strong></p><p>目前有的数据增强操作有：resize：[(1333, 640), (1333, 800)]，randomFilp（左右翻转），Normalize，Pad</p><p>增加上下翻转的操作，同时翻转mask和box。</p><p><strong>检测人体的一些参数：</strong></p><p>置信度threshold=0.3</p><p>4.5最新的segmentation结果：</p><ul><li><p>增加了人的上下翻转</p></li><li><p>改变了mask和人的面积的占比的阈值</p></li><li><p>使用了RDSNet原始的预训练模型</p></li><li>先过滤掉skis的GT，用原始的模型跑了一版只有人的mask，然后再训练所有的数据</li></ul><p>nums of all images:574 detect img: 574<br>pa: 0.9354692319143859<br>person pa: 0.952586679919327; ski pa 0.795659633538158<br>person mIU: 0.8703372762800548; ski mIU 0.4621799597472673</p><p>赅睦v3结果：</p><p>nums of all images:574 detect img: 315 </p><p>pa: 0.9402883800000756        person pa: 0.9549458484555311;     </p><p>ski pa    0.8145014928441581 person mIU: 0.8682211200110778</p><p>ski mIU 0.4661748785006413</p><p>4.3最新segmentation结果：</p><p>nums of all images:574 detect img: 233</p><p>pa: 0.9369132159512628</p><p>person pa: 0.9535568322424365;      ski pa 0.7994298667822376</p><p>person mIU: 0.8703037390529358;   ski mIU 0.4607294905584023</p><p>513张检测出来</p><p>pa: 0.931</p><p>person pa: 0.948; ski pa 0.786</p><p>person mIU: 0.881; ski mIU 0.450</p><p>最新的，雪板缺失的结果：</p><p>nums of all images:574 detect img: 492<br>pa: 0.9325332039535604<br>person pa: 0.952345728818519;        ski pa 0.774363662229735<br>person mIU: 0.8692397985003847;   ski mIU 0.46683807840731795</p><h4 id="本周的工作"><a href="#本周的工作" class="headerlink" title="本周的工作"></a>本周的工作</h4><ol><li>对视频进行mask抠像</li><li>将标注数据转化成80分类的数据格式，共8k张</li><li>训练了一版没有加入coco数据集80分类的结果</li><li>将coco加入数据集，重新训练新一版的结果</li></ol><p>0413：将划水数据加入数据集中得到的结果，感觉还有提升空间，可以继续训练</p><p>nums of all images:574 detect img: 496<br>pa: 0.9343723520825538<br>person pa: 0.9539596612578186; ski pa 0.7762043705731111<br>person mIU: 0.8691335572039341; ski mIU 0.4734166211250842<br>122.55705881118774</p><p>0415：80分类的跳水 + 滑雪数据：</p><p>nums of all images:574 detect img: 500<br>pa: 0.9338427680139673<br>person pa: 0.9529509669453708; ski pa 0.7774459065324504<br>person mIU: 0.8697633935721094; ski mIU 0.4716099906503192<br>123.1501772403717</p><table><thead><tr><th></th><th>总数</th><th>det_img</th><th>pa</th><th>person pa</th><th>person miu</th><th>ski pa</th><th>ski miu</th><th>备注</th></tr></thead><tbody><tr><td>0420_epoch16</td><td>574</td><td>279</td><td>0.95</td><td>0.97</td><td>0.88</td><td>0.84</td><td>0.50</td><td>加入coco数据</td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><h3 id="修改的点"><a href="#修改的点" class="headerlink" title="修改的点"></a>修改的点</h3><ol><li>数据增强：加入forst，上下翻转，brightness（defocus）</li><li>FL with distance aware</li></ol><h3 id="A-distance-aware-cross-entropy-loss"><a href="#A-distance-aware-cross-entropy-loss" class="headerlink" title="A distance-aware cross entropy loss"></a><strong>A distance-aware cross entropy loss</strong></h3><p>即： Class Weight based Dual Focal Loss</p><p> although FL proved to be better than CE and WCE to address both class imbalance and class weakness, it increases the weight factor on ‘positive hard’ classes {𝑃𝑖 ̂: 𝑃𝑖 = 1, 𝑃𝑖 ̂ ≪ 1}) only and remains blind to the ‘negative easy’</p><h3 id="剪视频"><a href="#剪视频" class="headerlink" title="剪视频"></a>剪视频</h3><p>滑雪视频：bFF_20191214095649.mp4</p><p>跳水场景</p><p>V1:</p><p>nums of all images:372 detect img: 109<br>pa: 0.8202673860246401<br>person pa: 0.8604234773163142; ski pa 0.4365939611642742<br>person mIU: 0.834689556354205; ski mIU 0.32204986948916425<br>57.603790283203125</p><p>v2：无</p><p>v3：</p><p>nums of all images:372 detect img: 234<br>pa: 0.8635791399587737<br>person pa: nan; ski pa 0.52861091026923<br>person mIU: 0.8660126998199129; ski mIU 0.37964839550921387<br>64.33940291404724</p><p>v4：（0413.epoch_47）</p><p>nums of all images:372 detect img: 240<br>pa: 0.8728082198181446<br>person pa: 0.9037850500010524; ski pa 0.5343325737147256<br>person mIU: 0.8766753717860475; ski mIU 0.3892417225535218<br>67.59345650672913</p><p>V5:(epoch_16)</p><p>nums of all images:372 detect img: 74<br>pa: 0.9405744365529746<br>person pa: 0.9630469046257544; ski pa nan<br>person mIU: 0.9072004643371733; ski mIU 0.0<br>62.072516441345215</p><ol><li>将部分跳水数据转成2分类，80分类验证集</li><li>对历史模型重新测试在跳水上的效果</li><li>绘制mask可视化视频（跳水和滑雪融合）</li><li>训练加入coco的RDSNet，验证最新结果</li></ol><h3 id="RDSNet的loss修改"><a href="#RDSNet的loss修改" class="headerlink" title="RDSNet的loss修改"></a>RDSNet的loss修改</h3><p>RDSNet目标检测上使用的loss是focal loss，在mask 分割上使用的loss是cross entropy loss。</p><p>mask分割的内部实现：</p><p><strong>mmdet/models/mask_heads/rdsnet_mask_head.py：213行</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(Pdb) pred_mask.shape</span><br><span class="line">torch.Size([<span class="number">34</span>, <span class="number">2</span>, <span class="number">248</span>, <span class="number">160</span>])</span><br><span class="line">(Pdb) gt_mask.shape</span><br><span class="line">torch.Size([<span class="number">34</span>, <span class="number">248</span>, <span class="number">160</span>])</span><br><span class="line">最终通过下面函数进行计算：</span><br><span class="line">input = log_softmax(input, <span class="number">1</span>)</span><br><span class="line">ret = torch._C._nn.nll_loss2d(input, target, weight, _Reduction.get_enum(reduction), ignore_index)</span><br></pre></td></tr></table></figure><p>V6 (epoch_37 0427)</p><p>滑雪：</p><p>nums of all images:574 detect img: 395<br>pa: 0.9525877472767361<br>person pa: 0.9645798724157836; ski pa 0.8437678375390546<br>person mIU: 0.8893634429910271; ski mIU 0.4647400425444946<br>110.54691290855408</p><p>跳水：</p><p>nums of all images:372 detect img: 143<br>pa: 0.9387247103765048<br>person pa: 0.9542593861783638; ski pa 0.7321668474084746<br>person mIU: 0.909753853880885; ski mIU 0.44296937228518907<br>61.86693835258484</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;RDSNet的一个亮点在于同一个网络同时学习目标检测和目标分割，这两个任务相互促进提升模型精度。RDSNet提出了双流结构，分别取学习目标尺度和像素尺度上的物体。同时两条流上的信息相互融合，相互促进各自的训练。object level为pixel level提供了实例信息，为pixel提供一些分割上的先验。pixel level为object level重新定义边框的定位，提升精度。&lt;/p&gt;
&lt;p&gt;在这个结构中，来自两个流的信息是交替融合，即对象层的信息引入实例意识和翻译差异到像素级，像素级的信息-在对象级别细化对象的定位精度作为回报&lt;/p&gt;
    
    </summary>
    
      <category term="深度学习" scheme="https://wenhui-zhou.github.io/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>LR 推导</title>
    <link href="https://wenhui-zhou.github.io/2020/03/14/LR-%E6%8E%A8%E5%AF%BC/"/>
    <id>https://wenhui-zhou.github.io/2020/03/14/LR-推导/</id>
    <published>2020-03-14T15:57:51.000Z</published>
    <updated>2020-03-14T16:42:48.396Z</updated>
    
    <content type="html"><![CDATA[<p>逻辑斯蒂回归是一种二分类模型，使用sigmoid函数判别函数，下面将详细讲一下逻辑回归的原理。</p><a id="more"></a><h3 id="逻辑回归函数"><a href="#逻辑回归函数" class="headerlink" title="逻辑回归函数"></a>逻辑回归函数</h3><ul><li>逻辑回归需要满足伯努利二次分布，即$h(\theta)$ 为正样本的概率，那么$1-h(\theta)$ 为负样本的概率。</li><li>样本分布相互独立，即求所有样本出现的概率可以通过连乘的形式得到。</li></ul><p><strong>sigmoid函数</strong><br>$$<br>h(\theta) = \frac{e^{wx}}{1+e^{wx}}<br>$$<br><strong>逻辑回归的损失函数：</strong></p><p>在一个二分类的数据中，一个事件发生的概率为：<br>$$<br>P(y | \boldsymbol{x})=\left{\begin{aligned} p, y &amp;=1 \ 1-p, y &amp;=0 \end{aligned}\right.<br>$$<br>为了方便计算将上式写成：<br>$$<br>P\left(y_{i} | \boldsymbol{x}_{i}\right)=p^{y_{i}}(1-p)^{1-y_{i}}<br>$$<br>当我们采集到一组数据，由于数据分布是相互独立的，因此联合的概率可以写成：<br>$$<br>\begin{aligned} P_{\breve{E}} &amp;=P\left(y_{1} | \boldsymbol{x}_{1}\right) P\left(y_{2} | \boldsymbol{x}_{2}\right) P\left(y_{3} | \boldsymbol{x}_{3}\right) \dots P\left(y_{N} | \boldsymbol{x}_{N}\right) \ &amp;=\prod_{n=1}^{N} p^{y_{n}}(1-p)^{1-y_{n}} \end{aligned}<br>$$<br>为了简化上面的式子，而不失去函数单调性，我们对函数取对数，得到：<br>$$<br>\begin{aligned} F(\boldsymbol{w})=\ln \left(P_{\breve{\mathbf{E}} \mathbf{h}}\right) &amp;=\ln \left(\prod_{n=1}^{N} p^{y_{n}}(1-p)^{1-y_{n}}\right) \ &amp;=\sum_{n=1}^{N} \ln \left(p^{y_{n}}(1-p)^{1-y_{n}}\right) \ &amp;=\sum_{n=1}^{N}\left(y_{n} \ln (p)+\left(1-y_{n}\right) \ln (1-p)\right) \end{aligned}<br>$$<br>其中p为sigmoid函数，可以发现上面实质加上负号就变成了交叉熵。</p><p><strong>逻辑回归函数的求导</strong></p><p>对于sigmoid函数，我们的求导如下：<br>$$<br>\begin{aligned} p^{\prime}=f^{\prime}(\boldsymbol{w}) &amp;=\left(\frac{1}{1+e^{-\boldsymbol{w}^{T} \boldsymbol{x}}}\right)^{\prime} \ &amp;=-\frac{1}{\left(1+e^{-\boldsymbol{w}^{T} \boldsymbol{x}}\right)^{2}} \cdot\left(1+e^{-\boldsymbol{w}^{T} \boldsymbol{x}}\right)^{\prime} \ &amp;=-\frac{1}{\left(1+e^{-\boldsymbol{w}^{T} \boldsymbol{x}}\right)^{2}} \cdot e^{-\boldsymbol{w}^{T} \boldsymbol{x}} \cdot\left(-\boldsymbol{w}^{T} \boldsymbol{x}\right)^{\prime} \ &amp;=-\frac{1}{\left(1+e^{-\boldsymbol{w}^{T} \boldsymbol{x}}\right)^{2}} \cdot e^{-\boldsymbol{w}^{T} \boldsymbol{x}} \cdot(-\boldsymbol{x}) \ &amp;=\frac{e^{-\boldsymbol{w}^{T} \boldsymbol{x}}}{\left(1+e^{-\boldsymbol{w}^{T} \boldsymbol{x}}\right)^{2}} \cdot \boldsymbol{x} \ &amp;=\frac{1}{1+e^{-\boldsymbol{w}^{T} \boldsymbol{x}}} \cdot \frac{e^{-\boldsymbol{w}^{T} \boldsymbol{x}}}{1+e^{-\boldsymbol{w}^{T} \boldsymbol{x}}} \cdot \boldsymbol{x} \ &amp;=p(1-p) \boldsymbol{x} \end{aligned}<br>$$<br>接下来对逻辑回归函数进行求导(求函数的最大似然)：<br>$$<br>\begin{aligned} \nabla F(\boldsymbol{w}) &amp;=\nabla\left(\sum_{n=1}^{N}\left(y_{n} \ln (p)+\left(1-y_{n}\right) \ln (1-p)\right)\right) \ &amp;=\sum\left(y_{n} \ln ^{\prime}(p)+\left(1-y_{n}\right) \ln ^{\prime}(1-p)\right) \ &amp;=\sum\left(\left(y_{n} \frac{1}{p} p^{\prime}\right)+\left(1-y_{n}\right) \frac{1}{1-p}(1-p)^{\prime}\right) \ &amp;=\sum_{n=1}\left(y_{n}(1-p) \boldsymbol{x}_{n}-\left(1-y_{n}\right) p \boldsymbol{x}_{n}\right) \ &amp;=\sum_{n=1}^{N}\left(y_{n}-p\right) \boldsymbol{x}_{n} \end{aligned}<br>$$<br><strong>SGD</strong></p><p>对参数进行更新，得到：<br>$$<br>\boldsymbol{w}_{t+1}=\boldsymbol{w}_{t}+\eta \nabla F(\boldsymbol{w})<br>$$</p><p>$$<br>\boldsymbol{w}_{t+1}= \boldsymbol{w}_{t} + \eta \sum_{n=1}^{N}\left(y_{n}-p\right) \boldsymbol{x}_{n}<br>$$</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;逻辑斯蒂回归是一种二分类模型，使用sigmoid函数判别函数，下面将详细讲一下逻辑回归的原理。&lt;/p&gt;
    
    </summary>
    
      <category term="机器学习" scheme="https://wenhui-zhou.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>TrackIn:BERT five-classification on MSMARCO.md</title>
    <link href="https://wenhui-zhou.github.io/2020/03/12/TrackIn-BERT/"/>
    <id>https://wenhui-zhou.github.io/2020/03/12/TrackIn-BERT/</id>
    <published>2020-03-12T12:54:09.000Z</published>
    <updated>2020-04-27T06:17:05.628Z</updated>
    
    <content type="html"><![CDATA[<p>这篇post主要构建一个BERT的五分类模型，然后研究使用TrackIn来确定样本在模型训练中，对模型inference的影响。</p><a id="more"></a><h3 id="MS-MARCO"><a href="#MS-MARCO" class="headerlink" title="MS MARCO"></a>MS MARCO</h3><p>MS MARCO是微软发布的一个NLP问答数据集，里头含有100000个真实的在bing上提出的问题，以及问题的答案，可作为QnA问题的数据集，此后还陆续提出了多种问题的数据集。</p><p>格式的介绍在这里：<a href="https://microsoft.github.io/MSMARCO-Passage-Ranking/" target="_blank" rel="noopener">https://microsoft.github.io/MSMARCO-Passage-Ranking/</a></p><p>MARCO数据集中，比较重要的文件有：</p><ul><li><p><strong>triples.train.small.tsv</strong>，他的文件格式为:&lt;query,doc1,doc2&gt;，第一个doc1是positive，第二个doc2是negative。</p></li><li><p><strong>top1000.dev.tsv：</strong>&lt;query_id ,doc_id,query,doc&gt;，即query和doc对</p></li><li><strong>qrels.dev.small.tsv</strong>：&lt;query_id,0,doc_id,1&gt;，用来判断query和doc是否是相互关联的。</li></ul><p>triples.train.small.tsv中query是重复的。</p><h3 id="STSB数据集"><a href="#STSB数据集" class="headerlink" title="STSB数据集"></a>STSB数据集</h3><p>用1到5的分数来表征两个句子的语义相似性，本质上是一个回归问题，但依然可以用分类的方法做，因此可以归类为句子对的文本五分类任务。</p><p>数据集的格式为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">indexgenrefilenameyearold_indexsource1source2sentence1sentence2score</span><br></pre></td></tr></table></figure><p>其中我们用到的数据是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sentence1sentence2score</span><br><span class="line">A plane is taking off.An air plane is taking off.5.000</span><br></pre></td></tr></table></figure><p>数据首先经过wordembedding，每个词变成长度为768的向量，每个句子通过pad_sequence变成长度为512，因此输出为【512 x 768】随后将【512 x 768】加上position embedding输入BERT模型中。</p><h3 id="dataloader部分"><a href="#dataloader部分" class="headerlink" title="dataloader部分"></a>dataloader部分</h3><p>使用一个数据存储数据，格式为&lt;query,doc,label&gt;,然后将数组存储为dataloader。其中label = 0 表示负类，label = 1 表示你正类。</p><p>其具体的实现过程如下：</p><p>首先将数据query与doc分别经过tokenizer分词化，然后组成一个输入:</p><p>[CLS] + tokens_query + [SEP] + tokens_doc + [SEP]</p><p>随后将分词转换为vocab中的word id，构建一个segments_tensor，长度与输入长度相同，其中query部分为0，doc部分为1。如果我们希望返回一个batch，需要将所有的tensor通过前面填充0 的方式，将tensor维度变成一直（pad_sequence）,同时构建一个mask，mask的维度与batch的维度相同，其中用零填充的部分为0，不是0填充的部分为1。</p><p>最终dataloader将返回：</p><p>&lt;tokens_tensors, masks_tensors,segments_tensors,  labels_ids&gt; </p><p>tensor的维度为：tokens_tensor为：32x128</p><h3 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h3><p>模型使用<code>transformers.BertForSequenceClassification</code></p><p>该模型的网络结构如下：</p><p><img src="/Users/zhouwenhui/blog/source/images/nlp/image-20200314021335605.png" alt="image-20200314021335605" style="zoom:50%;"></p><p>即BERT的基础上加上一层全连接层，全链接层输入为768，输出为label class的个数，最后通过一个交叉熵得出最后的loss。</p><h3 id="STSB评价指标"><a href="#STSB评价指标" class="headerlink" title="STSB评价指标"></a>STSB评价指标</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pearson_and_spearman</span><span class="params">(preds, labels)</span>:</span></span><br><span class="line">        pearson_corr = pearsonr(preds, labels)[<span class="number">0</span>]</span><br><span class="line">        spearman_corr = spearmanr(preds, labels)[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="string">"pearson"</span>: pearson_corr,</span><br><span class="line">            <span class="string">"spearmanr"</span>: spearman_corr,</span><br><span class="line">            <span class="string">"corr"</span>: (pearson_corr + spearman_corr) / <span class="number">2</span>,</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p><strong>pearson:</strong>是衡量向量相似度的一种方法。输出范围为-1到+1, 0代表无相关性，负值为负相关，正值为正相关。<br>$$<br>\rho(X, Y)=\frac{E\left[\left(X-\mu_{X}\right)\left(Y-\mu_{Y}\right)\right]}{\sigma_{X} \sigma_{Y}}=\frac{E\left[\left(X-\mu_{X}\right)\left(Y-\mu_{Y}\right)\right]}{\sqrt{\sum_{i=1}^{n}\left(X_{i}-\mu_{X}\right)^{2}} \sqrt{\sum_{i=1}^{n}\left(Y_{i}-\mu_{Y}\right)^{2}}}<br>$$<br>相关系数 0.8-1.0 极强相关</p><p>0.6-0.8 强相关</p><p>0.4-0.6 中等程度相关</p><p>0.2-0.4 弱相关</p><p>0.0-0.2 极弱相关或无相关</p><p><strong>spearmanr</strong>：斯皮尔曼相关系数表明X(独立变量)和Y(依赖变量)的相关方向：<br>$$<br>\rho=\frac{\sum_{i}\left(x_{i}-\bar{x}\right)\left(y_{i}-\bar{y}\right)}{\sqrt{\sum_{i}\left(x_{i}-\bar{x}\right)^{2} \sum_{i}\left(y_{i}-\bar{y}\right)^{2}}}<br>$$</p><h3 id="trackIn-理解"><a href="#trackIn-理解" class="headerlink" title="trackIn 理解"></a>trackIn 理解</h3><p>TrackIn核心的观点在于model经过当前样本训练迭代后，更新参数得到的新模型在验证集上loss与未更新前下降的数值之差。</p><p><strong>样本影响力</strong>的定义如下（z为指定的样本，z’为验证集）：</p><p><img src="/Users/zhouwenhui/blog/source/images/nlp/clip_image001.png" alt="img" style="zoom:50%;"></p><p>理想状态：即在某次迭代，能够指定一个训练样本。</p><p>在理想状态下，所有训练数据对验证集样本的影响如下：</p><p><img src="/Users/zhouwenhui/blog/source/images/nlp/clip_image002.png" alt="img" style="zoom:50%;"></p><p><strong>上述公式，默认条件是每次迭代仅在一个训练样本上进行训练。</strong></p><p>作者使用一阶近似来估计迭代t中，测试示例的损失变化：</p><p><img src="/Users/zhouwenhui/blog/source/images/nlp/clip_image003.png" alt="img" style="zoom:50%;"></p><p>其中梯度的计算是在验证集数据上的。</p><p>SGD梯度下降法计算参数迭代如下：</p><p><img src="/Users/zhouwenhui/blog/source/images/nlp/clip_image004.png" alt="img" style="zoom:50%;"></p><p>将两个公式结合，忽略高阶项得到：</p><p><img src="/Users/zhouwenhui/blog/source/images/nlp/clip_image005.png" alt="img" style="zoom:50%;"></p><p>因此我们固定一个样本z，可以算出利用z的所有迭代次数的影响力之和：</p><p><img src="/Users/zhouwenhui/blog/source/images/nlp/clip_image006.png" alt="img" style="zoom:50%;"></p><p>当我们训练数据不是一个样本，而是一个batch的时候：</p><p><img src="/Users/zhouwenhui/blog/source/images/nlp/clip_image007.png" alt="img" style="zoom:50%;"></p><p>作者在实际的应用中，在每次迭代仅使用单个样本，保存学习率不变，模型每次在训练集上训练一次后保存一个检查点checkpoint，因此两个checkpoint之间样本仅训练过一次。作者利用检查点的参数，作为近似参数向量：</p><p><img src="/Users/zhouwenhui/blog/source/images/nlp/clip_image008.png" alt="img" style="zoom:50%;"></p><p>上式的含义是模型参数wt 到wt+1之间，样本z对验证集的影响。通过对这个影响是positive或negative的判断，得到样本对模型的影响力，一个应用就是用来判断是否存在样本误标注的问题。</p><p>作者论文中给出一个NLP例子是文本分类问题，证明这种方法也是可以用在NLP中的。 </p><h3 id="trackIn的一点尝试"><a href="#trackIn的一点尝试" class="headerlink" title="trackIn的一点尝试"></a>trackIn的一点尝试</h3><ol><li><p>使用STS-B数据集：五分类数据集，数据示例如下：</p><p> sentence1 sentence2 similar_score（0-4）<br> A plane is taking off.    An air plane is taking off.    4<br> A man is playing a large flute.    A man is playing a flute.    3<br> A man is smoking.    A man is skating.    0</p></li><li><p>使用huggingface中的BertForSequenceClassification类，调整网络的输出为五分类，该网络的结构为：<br> Bert + dropout + linear（768x5）+ corssentropy</p></li><li><p>原始版本训练10个epoch后，得到了检测的指标指标：<br> corr = 0.8668199467352331<br> pearson = 0.8680211975793752<br> spearmanr = 0.865618695891091<br> 这个成绩在glue排行版上top20左右，top10以上基本你上90分。</p></li><li><p>fix BERT部分参数，仅训练linear层，10个epoch之后的指标为：<br> corr = 0.46851795469199176<br> pearson = 0.4883897702565989<br> spearmanr = 0.44864613912738466</p></li><li><p>由于Bert后的分类结构过于简单，因此在原始网络后面添加linear层。fix bert部分，训练得到结果：<br> Bert + linear（768x100） + linear(100x5) + crossentropy<br> corr = 0.4874025699052884<br> pearson = 0.48976918410773407<br> spearmanr = 0.4850359557028428</p></li><li><p>bert + linear(768,300) + linear(300,50) + linear(50,5):<br> corr = 0.4901503255725512<br> pearson = 0.49249477605462705<br> spearmanr = 0.48780587509047535</p></li><li><p>Bert + linear(768,300) + linear(300,100) + linear(100,50) + linear(50,5) </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">corr = 0.5010257366795687</span><br><span class="line">pearson = 0.5034574745457592</span><br><span class="line">spearmanr = 0.49859399881337824</span><br></pre></td></tr></table></figure></li><li><p>训练bert最后一层以及linear层得到的结果：<br>bert + linear(768,300) + linear(300,100) + linear(100,50) + linear(50,5)</p><p> corr = 0.7648302644703243<br> pearson = 0.7663893373697331<br> spearmanr = 0.7632711915709155</p></li></ol><p>pearson:输出范围为-1到+1, 0代表无相关性，负值为负相关，正值为正相关。<br>相关系数 0.8-1.0 极强相关<br>0.6-0.8 强相关<br>0.4-0.6 中等程度相关<br>0.2-0.4 弱相关<br>0.0-0.2 极弱相关或无相关</p><h3 id="分析trackIn函数"><a href="#分析trackIn函数" class="headerlink" title="分析trackIn函数"></a>分析trackIn函数</h3><p>$$<br>\operatorname{TrackIn}\left(z, z^{\prime}\right)=\sum_{t: z_{t}=z} \eta_{t} \nabla \ell\left(w_{t}, z^{\prime}\right) \cdot \nabla \ell\left(w_{t}, z\right)<br>$$</p><p>如上，作者经过一些推导之后得到TrackIn的表达式，表达式表明，在第t步迭代的时候，训练样本z 对 待测试样本$z^`$ 的影响的计算方法是： 待测样本在$w_t$上的梯度与训练样本在$w_t$上的梯度的乘积。</p><p>这时候有一个问题，就是$w_t$是一个矩阵，而TrackIn是loss的差，是一个标量，我的想法是矩阵对应位置相乘后相加，得到最后的结果。可以把t次数调大一点，使得效果能够明显一点。</p><p>因此思路如下：</p><ol><li>将训练样本和测试样本输入网络，然后将Bert最后一层以及classifier层的梯度拿出来</li><li>计算梯度相乘，然后求和得到trackIn的值</li><li>记录一个表，表中的内容是target example 和 对应的一些列 train example，然后每个train example有一个trackIn的值。</li></ol><p>因此要做的事情是：</p><ol><li>重新设计数据集，dataset，dataloader</li><li>对训练数据和测试数据迭代t次网络，然后将每次的梯度记到txt中</li><li>写一个矩阵相乘的代码，得到trackIn的值</li></ol><p>明天做！</p><p>测试数据：</p><p>aa: A plane is taking off.    An air plane is taking off.    5.000  </p><p>trackIn训练数据（假样本对数据的影响）：</p><p>b1: A plane is taking off.    A man wearing a hard hat is dancing.    5.000   :11326.170552326665</p><p>b2: A plane is taking off.    The plane is about to take off.     5.0 done         :11326.172044273939</p><p>b3: A plane is taking off.    Spaceship is about to take off.     3.0 done         :11326.17223393679</p><p>提取出20%的样本，其中最后一层输出的25维vector相似的向量，发现没有明显的规律。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这篇post主要构建一个BERT的五分类模型，然后研究使用TrackIn来确定样本在模型训练中，对模型inference的影响。&lt;/p&gt;
    
    </summary>
    
      <category term="NLP" scheme="https://wenhui-zhou.github.io/categories/NLP/"/>
    
    
  </entry>
  
</feed>
