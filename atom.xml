<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>WenHuiZhou</title>
  
  <subtitle>perper（打起精神！）</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://wenhui-zhou.github.io/"/>
  <updated>2021-01-06T13:25:18.487Z</updated>
  <id>https://wenhui-zhou.github.io/</id>
  
  <author>
    <name>WenHuiZhou</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>some spark</title>
    <link href="https://wenhui-zhou.github.io/2021/01/06/some-spark/"/>
    <id>https://wenhui-zhou.github.io/2021/01/06/some-spark/</id>
    <published>2021-01-06T13:06:42.000Z</published>
    <updated>2021-01-06T13:25:18.487Z</updated>
    
    <content type="html"><![CDATA[<p>【2021-01-03】2021年最开始的那段时间，有一句话一直在我脑子盘旋，2021是2020的延续。疫情重新在北京出现，气温也越来越低，我的烦恼没有减少反而更多了。</p><p>【2021-01-03】在犹豫选择的时候</p><p>用我打了却没发给🐑的话来说就是：人们总是在努力寻找平衡，达到平衡之后又伺机打破平衡，循环往复。</p><p>用叔本华的话来说就是：“人生不过是一座摇摆于无聊和痛苦之间的钟摆。或者因欲望的不能满足而痛苦，或者因为满足后的空虚而无聊。”</p><p>希望叔本华不会介意这样的排比。</p><p>总之在经历烦恼和压力的同时，我像多年前一样，开始觉悟：这就是人生常态，烦恼将伴随你的一生。</p><p>【2021-01-05】一天晚上回家，路边店铺传出一句歌词：“花花世界，鸳鸯蝴蝶”。 转而感慨眼下的世界平平淡淡，远方的世界炫目多彩。</p><p><img src="/Users/zhouwenhui/blog/source/images/nlp/image-20210106212511547.png" alt="image-20210106212511547"></p><p>【2021-01-06】情不知所起，一往而深，生者可以死，死者可以生</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;【2021-01-03】2021年最开始的那段时间，有一句话一直在我脑子盘旋，2021是2020的延续。疫情重新在北京出现，气温也越来越低，我的烦恼没有减少反而更多了。&lt;/p&gt;
&lt;p&gt;【2021-01-03】在犹豫选择的时候&lt;/p&gt;
&lt;p&gt;用我打了却没发给🐑的话来说就是：
      
    
    </summary>
    
      <category term="spark" scheme="https://wenhui-zhou.github.io/categories/spark/"/>
    
    
  </entry>
  
  <entry>
    <title>协同过滤算法</title>
    <link href="https://wenhui-zhou.github.io/2020/12/24/%E5%8D%8F%E5%90%8C%E8%BF%87%E6%BB%A4%E7%AE%97%E6%B3%95/"/>
    <id>https://wenhui-zhou.github.io/2020/12/24/协同过滤算法/</id>
    <published>2020-12-24T03:59:41.000Z</published>
    <updated>2020-12-24T04:00:41.845Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><ul><li><a href="#------">协同过滤算法</a><ul><li><a href="#-------">推荐算法的演化</a></li><li><a href="#-------1">协同过滤算法</a><ul><li><a href="#-------">相似度计算方法</a></li><li><a href="#----">推荐计算</a></li></ul></li><li><a href="#----">代码实现</a><ul><li><a href="#------">重要框架介绍</a><ul><li><a href="#apache">Apache</a></li><li><a href="#spark">spark</a></li><li><a href="#hadoop">hadoop</a></li><li><a href="#hadoop-spark">hadoop和spark</a></li></ul></li><li><a href="#----">代码实现</a><ul><li><a href="#总结">总结</a></li></ul></li></ul></li></ul></li></ul><h1 id="协同过滤算法"><a href="#协同过滤算法" class="headerlink" title="协同过滤算法"></a>协同过滤算法</h1><p>协同过滤算法是推荐中最早应用的，最古老的算法。从他晦涩的名字就可以看出来这个算法有着很深的数学内涵（自己胡扯），但是实际上他的做法却非常的简单。</p><h2 id="推荐算法的演化"><a href="#推荐算法的演化" class="headerlink" title="推荐算法的演化"></a>推荐算法的演化</h2><p>在具体到点之前，先看看整个面。推荐算法从90年代开始发展至今，已经成为了一个独立的学科。主要发展的历程为：</p><ol><li>1994年提出协同过滤算法，作为推荐系统Grouplens的主要推荐技术</li><li>1995年提出个性化推荐</li><li>1997年首次提到推荐系统（recommender system）</li><li>1998年亚马逊上线了基于物品的协同过滤算法</li><li>2003年，Google推出了adword的计价模式，即广告计价</li><li>2006年netflix宣布一个推荐算法竞赛，极大地促进了推荐系统的发展</li><li>2007年雅虎退出个性化横幅广告</li><li>2007年第一个ACM推荐系统大会召开</li><li>2015年Facebook在官网公布了推荐系统的原理及应用</li><li>2016年YouTube，google发表论文说明推荐系统的应用</li></ol><h2 id="协同过滤算法-1"><a href="#协同过滤算法-1" class="headerlink" title="协同过滤算法"></a>协同过滤算法</h2><p>首先从名字出发，<strong>协同：寻找相似性</strong>，<strong>过滤：利用相似性过滤掉一些无用的商品。</strong></p><p>算法的整体思路是：</p><ol><li>用户对物品发生的行为，例如点击，购买等等，通过对数据的加权、分组、减噪、归一化等等预处理过程，得到用户对物品的喜爱程度的一张大表</li><li>相似度计算，用户相似性：用户对所有物品的偏好向量；物品相似性：所有用户对该物品的偏好向量</li><li>相似度计算，通过一些准则（cos，欧氏距离，皮尔逊系数等），计算用户、物品的相似性。</li><li>例如用户，找到与该用户向量最相似的top N，这个topN喜欢的物品就可以推荐给这个用户</li></ol><p><strong>一句话概括：UserCF：利用用户对物品的偏好找到相似的用户，然后将相似用户喜欢的物品推荐给当前用户。（itemCF原理相似）</strong></p><h3 id="相似度计算方法"><a href="#相似度计算方法" class="headerlink" title="相似度计算方法"></a>相似度计算方法</h3><p>只提供方法，不愿意写公式了：</p><ul><li>同现相似度（A,B的交集比上A,B的集合相乘开根号）</li><li>欧氏距离（平方差）</li><li>cos相似度</li><li>tanimoto系数</li></ul><h3 id="推荐计算"><a href="#推荐计算" class="headerlink" title="推荐计算"></a>推荐计算</h3><p>通过相似度计算方法，得到的物品相似度矩阵，然后此时来了一条用户喜好记录。将这个矩阵和这个记录相乘，得到一个一维的矩阵，每个位置上为推荐得分。然后对这个一维矩阵进行排序，去除掉用户已有的喜好的商品，剩下的商品就是推荐给用户的商品。</p><p>上述过程技术，即完成了协同过滤算法的步骤，原理部分。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="重要框架介绍"><a href="#重要框架介绍" class="headerlink" title="重要框架介绍"></a>重要框架介绍</h3><h4 id="Apache"><a href="#Apache" class="headerlink" title="Apache"></a>Apache</h4><p>经常听到由Apache开头的各类神奇的技术，例如Apache HTTP Server，Apache hadoop等等，然后这是个什么东西呢？我们从他的组织说起。</p><p>apache软件基金会，是一个专门支持开源项目的非盈利组织，在他支持的项目中，所发行的软件都遵循apache许可证。 </p><p>这个组织最早是由一群爱好者维护的一个叫apache的http服务器，这群爱好者通过一个邮件列表组织起来，交流重写和代码维护的工作。这个群体自称为 <strong>apache组织</strong> ，这个不断重写的工作被称为 <strong>apache服务器。</strong></p><p>apache的名字由一支印第安部落而来，这支部落有超高的素养，和超高的耐力战不无胜。开发者为了向他们表示敬意，取该部落的名称作为服务器的名字。</p><p>后来由于商业需求的扩大，以apache服务器为中心，启动了很多并行的项目，例如PHP，mod_perl，java apache,hadoop，tomcat等等。这些使得我们经常在网上看到apache的身影。</p><ul><li>apache http server： 最早的http服务器软件（是你的电脑变成服务器）</li><li>apache flink：流计算引擎</li><li>apache hadoop：并发运算编程工具和分布式文件系统</li><li>apache tomcat：运行JSP的容器</li><li>apache spark：开源集群运算框架</li></ul><p>…</p><p>下面重点介绍一下几个项目。</p><h4 id="spark"><a href="#spark" class="headerlink" title="spark"></a>spark</h4><p>apache spark是一个开源集群运算框架，spark使用存储器内运算技术，使得数据尚未写入磁盘是就开始分析计算，spark允许用户将数据加载到集群数据器上，并进行多次的查询，非常适合用于计算机学习算法。</p><p>spark提供了java，Scala，python三种API的接口。</p><h4 id="hadoop"><a href="#hadoop" class="headerlink" title="hadoop"></a>hadoop</h4><p>hadoop是一个分布式文件系统，用户可以在不了解分布式底层细节的情况下，开发分布式程序，充分利用集群的威力进行高速运算和存储。适合那些有着超大数据集的程序。hadoop的核心设计是HDFS和mapReduce，HDFS为海量数据提供了存储，mapReduce为海量数据提供了计算。</p><p>hadoop的故事很有趣，详情请看：<a href="https://zhuanlan.zhihu.com/p/54994736" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/54994736</a></p><p><strong>存储HDFS部分：</strong></p><p>他的简要的工作流程如下：</p><ol><li>用户打算存储一个200M的数据</li><li>系统将数据进行了切割，分成3个64M的块（集群分布式）</li><li>依次对数据进行存储</li></ol><p>用户打算读取数据：</p><ol><li>用户发出读取数据的请求</li><li>系统将各个块的地址，距离排序后告诉client</li><li>client根据块地址、距离进行数据的读取</li></ol><p><strong>计算mapReduce部分：</strong></p><p>mapReduce是一个编程模型，提供了map（映射）和reduce（归约两个过程）。</p><p>工作流程如下：</p><ol><li>用户提出一个计算请求</li><li>mapReduce将这个计算请求拆分成若干个map任务，然后分配到不同节点上去执行（利用集群的算力）</li><li>map过程生成了许多的中间文件，这些中间文件作为reduce的输入数据，将map计算的结果合并，并作为最后的输出</li></ol><p>mapReduce极大的方便了程序员在不会分布式编程的情况下，将自己的程序运行在分布式系统上。</p><h4 id="hadoop和spark"><a href="#hadoop和spark" class="headerlink" title="hadoop和spark"></a>hadoop和spark</h4><p>spark可以理解为hadoop上的一种改进，spark是一个类hadoop mapreduce的通用并行框架。mapReduce是面向磁盘的，受限于磁盘读写的速度，mapReduce在处理实时迭代，实时计算、交互式数据查询等方面效率比较差，而这些计算却非常的常见。</p><p>spark是面向内存的，若在内存中运行，spark比hadoop快100倍，其他任务上都会快很多。同时spark在易用性，通用性上比hadoop强，因此spark的风头，已经盖过了hadoop。</p><h3 id="数据介绍"><a href="#数据介绍" class="headerlink" title="数据介绍"></a>数据介绍</h3><p><strong>movieLens：</strong>是一个推荐系统和虚拟社区网站，其主要功能是利用协同过滤技术来对用户推荐喜爱的电影。movieLens数据集是电影评分的数据集合，大小从1M到20M。MovieLens Full（全部数据）含有来自270,000名用户对45,000部电影的26,0000,000条评分数据。</p><p>下载地址：<a href="https://grouplens.org/datasets/movielens/" target="_blank" rel="noopener">https://grouplens.org/datasets/movielens/</a></p><p>数据集内容介绍：<a href="https://www.kesci.com/mw/dataset/5a69840dafceb51770d60948" target="_blank" rel="noopener">https://www.kesci.com/mw/dataset/5a69840dafceb51770d60948</a></p><p>其他推荐数据集：<a href="https://zhuanlan.zhihu.com/p/29416305" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/29416305</a></p><p>本文使用的数据集采用small数据集：100,000 ratings and 3,600 tag applications applied to 9,000 movies by 600 users.</p><p>small数据集介绍：<a href="http://files.grouplens.org/datasets/movielens/ml-latest-small-README.html" target="_blank" rel="noopener">http://files.grouplens.org/datasets/movielens/ml-latest-small-README.html</a></p><h3 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h3><p>首先介绍userCF的思路。</p><p>当前的数据集为rating.csv，里头有着用户的id，电影的id，用户对电影的评分rate。算法要求输入一个用户id，以及推荐商品的数量，输出topN数量的推荐电影。</p><p>具体的做法如下：</p><ol><li>用看过的电影id来表示用户</li><li>计算target用户与其他所有的用户的相似度，并找到topN相似的用户</li><li>找出topN相似的用户看过的，而target没看过的电影</li><li>将这个电影乘以topN相似用户给他的评分（归一化后），再乘上该用户与target用户的相似度。如果topN用户没看过这个电影，评分为0</li><li>最终求和，得到这个电影的感兴趣度。重复上述步骤，最终输出topN的感兴趣电影。</li></ol><p>itemCF的思路与上面相似。</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>上述代码基于1M的数据集来做，实际操作数据的过程中，涉及到了比较繁琐的步骤，实际生产环境应该会使用spark这种框架，来调度集群数据集来完成协同过滤的计算。</p><p>最后一点关于协同过滤算法的想法。个人觉得协同过滤算法非常的简单，通过一个onehot编码来表征这个用户，然后用相似度度量方法计算相似度，最后得到推荐的商品，整个过程没有用到深度学习。这样的算法没有思路简单，利于实现，但是没有学习的过程。最为推荐基础算法提供了研究推荐系统的方法，为之后的深度学习方法提供了土壤。</p><p>本文代码：<a href="./Perper/Code">地址</a></p><p>代码执行结果：</p><p>userCF:</p><p><img src="/Users/zhouwenhui/workspace/recommand-system/Perper/images/result_1.jpg"></p><p>itemCF:</p><p><img src="/Users/zhouwenhui/workspace/recommand-system/Perper/images/result_2.png"></p><p>代码地址：<a href="https://github.com/WenHui-Zhou/recommand-system" target="_blank" rel="noopener">https://github.com/WenHui-Zhou/recommand-system</a></p><p>代码参考：<a href="https://github.com/lpty/recommendation" target="_blank" rel="noopener">https://github.com/lpty/recommendation</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#------&quot;&gt;协同过滤算法&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#-------&quot;&gt;推荐算法的演化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#-------1&quot;&gt;协同过滤算法&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a
      
    
    </summary>
    
      <category term="推荐系统" scheme="https://wenhui-zhou.github.io/categories/%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/"/>
    
    
  </entry>
  
  <entry>
    <title>github指令</title>
    <link href="https://wenhui-zhou.github.io/2020/12/19/github%E6%8C%87%E4%BB%A4/"/>
    <id>https://wenhui-zhou.github.io/2020/12/19/github指令/</id>
    <published>2020-12-19T14:18:27.000Z</published>
    <updated>2020-12-22T03:24:30.284Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="github-指令介绍"><a href="#github-指令介绍" class="headerlink" title="github 指令介绍"></a>github 指令介绍</h1><h2 id="git的原理"><a href="#git的原理" class="headerlink" title="git的原理"></a>git的原理</h2><p>Git的核心是对象数据库，其中三类核心的对象为：</p><ul><li><p><strong>blob对象：</strong>实现对文件内容的记录；对象保存在.git/objects； </p></li><li><p><strong>tree对象：</strong>实现对文件名，文件结构的记录以及变更过程；对象保存在暂存区.git/index文件中</p></li><li><p><strong>commit对象：</strong>实现对版本提交时间，作者信息，版本说明的记录；</p></li></ul><h2 id="github-提交代码"><a href="#github-提交代码" class="headerlink" title="github 提交代码"></a>github 提交代码</h2><h3 id="上传代码的三个步骤"><a href="#上传代码的三个步骤" class="headerlink" title="上传代码的三个步骤"></a>上传代码的三个步骤</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add filename</span><br><span class="line">git commit -m &apos;detail&apos;</span><br><span class="line">git push</span><br></pre></td></tr></table></figure><h3 id="github的分区管理与代码上传"><a href="#github的分区管理与代码上传" class="headerlink" title="github的分区管理与代码上传"></a>github的分区管理与代码上传</h3><p>git以分区的形式管理文件，主要是两大分区：</p><p><strong>工作区：</strong>即当前的工作路径，保存着自己写的代码</p><p><strong>版本库：</strong>在当前工作区下有一个隐藏的文件夹.git，这边是git的版本库，实现版本的管理。</p><p>版本库中存了很多东西，其中最重要的是stage（index暂存区），还有git为我们自动生成的第一个分支master，以及指向当前分支的HEAD指针。</p><p>工作区与版本库之间的关系如下图：</p><p><img src="./images/nlp/github_1.png" alt="img"></p><p><img src="/images/nlp/github_1.png" alt="img"></p><p>因此代码提交的步骤可以看成：</p><ol><li>git add filename： 将文件从工作区提交到暂存区(index)中</li><li>git commit -m “note” ： 将文件从暂存区提交到当前head指向的分支上</li><li>git push将当前分支提交到服务器上</li></ol><p><strong>为什么要有暂存区：</strong>一个说法是，我们可以一个个的修改文件，然后一次性commit到当前分支上，比较有灵活性。因为有些修改我们可能不希望提交。</p><h3 id="查看代码状态-git-status"><a href="#查看代码状态-git-status" class="headerlink" title="查看代码状态 git status"></a>查看代码状态 git status</h3><p>git status可以查看：</p><ol><li>当前工作区文件是否被追踪，是否存在文件修改没有提交到暂存区上。</li><li>暂存区文件是否与当前分支文件内容不一样，是否存在需要commit的文件</li><li>提示你本分支的文件与服务器是否不同，如果不同的话，提示你push到服务器上</li></ol><h4 id="git-diff参数："><a href="#git-diff参数：" class="headerlink" title="git diff参数："></a>git diff参数：</h4><ol><li>不带参数：如果index不为空，对比工作区和index，如果index为空则对比工作区和commit</li><li>git diff branch1 branch2  对比不同分支的不同（-stat 仅列出不同文件）</li><li>git diff HEAD 比较工作区与最新的版本库</li></ol><p>git status的输出不是很好看懂，下面介绍一下：</p><p>git将不同文件合并输出,其中- 符号后面的内容是历史文件。+ 则是工作区的文件。这是他们之间的不同。</p><h2 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h2><h3 id="查看历史记录"><a href="#查看历史记录" class="headerlink" title="查看历史记录"></a>查看历史记录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git log # 查询历史的提交记录（主要是作者信息）</span><br><span class="line">git reflog # 查询历史的提交记录，主要是提交行为，找到对应的hash，可用于版本的回退</span><br></pre></td></tr></table></figure><p>###git 版本回退</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard HEAD~1 # 回退到上一个版本</span><br><span class="line">git reset --hard HEAD~2 # 回退到倒数第二个版本</span><br></pre></td></tr></table></figure><p>当我们使用hard参数，将彻底的返回到上一个版本，如果我们后悔了，想要回到未来的版本。有一个做法是，找到未来版本的hash码，然后：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard 哈希码</span><br></pre></td></tr></table></figure><p>如果我们找不到哈希码，可以通过：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reflog</span><br></pre></td></tr></table></figure><p>指令找回我们所有的提交指令，然后找到对应的哈希码。</p><h3 id="git-撤销修改"><a href="#git-撤销修改" class="headerlink" title="git 撤销修改"></a>git 撤销修改</h3><p>场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -- file_name</span><br></pre></td></tr></table></figure><p>场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset HEAD &lt;file_name&gt;</span><br></pre></td></tr></table></figure><p>就回到了场景1，第二步按场景1操作。</p><h3 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h3><h4 id="删除文件-1"><a href="#删除文件-1" class="headerlink" title="删除文件"></a>删除文件</h4><p>当我们需要删除一个文件时，在工作区直接：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm file_name</span><br></pre></td></tr></table></figure><p>但是这个时候版本库里头的文件还存在，这时候用命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rm file_name</span><br></pre></td></tr></table></figure><p>即可同步。</p><h4 id="误删恢复"><a href="#误删恢复" class="headerlink" title="误删恢复"></a>误删恢复</h4><p>当我们发生了误删之后，执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -- file_name</span><br></pre></td></tr></table></figure><p>即可恢复。git checkout这个方法的作用是用版本库的文件来替代工作区的文件。注意中间有一个 –符号。 </p><h3 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h3><p>git是一套技术，github则为我们提供了一个远程的服务器用于存储代码。</p><p>拉取线上代码的方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull</span><br></pre></td></tr></table></figure><h2 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h2><p>分支就是科幻电影里的平行时空，分支之间相互不干扰。但是在某个节点发生合并。</p><p>分支的意义在于，多人协作过程中，你写的代码没办法短期完成，如果直接提交到代码库将会造成别人无法工作。但是不提交又面临丢失的麻烦，因此就佳的方法就是新建一个分支，你在分支上可以任意提交代码，然后等你写完了再发起请求，一次性合并到代码库中。这样既起到保存代码的作用，也不会影响到其他人干活。</p><h3 id="创建与合并分支"><a href="#创建与合并分支" class="headerlink" title="创建与合并分支"></a>创建与合并分支</h3><p>git将分支通过时间线进行管理，系统自动创建一个主分支，即master分支。我们之前的所有操作都是在master分支上完成的。</p><p>事实上我们每一次提交是根据HEAD指针所指的分支。当我们新建一个分支dev，然后将HEAD指向新建的分支上，这样接下来做的修改就是在新的分支上了。</p><p>合并分支的过程也很快，就是把master指向dev的当前提交，就完成了合并工作。合并完成之后将dev指针删除就删掉了dev分支。</p><h4 id="创建分支的命令："><a href="#创建分支的命令：" class="headerlink" title="创建分支的命令："></a>创建分支的命令：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch dev_name</span><br></pre></td></tr></table></figure><h4 id="查看分支："><a href="#查看分支：" class="headerlink" title="查看分支："></a>查看分支：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure><p>####查看分支的关联情况：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -a # 即分支对应的指针</span><br></pre></td></tr></table></figure><h4 id="切换分支："><a href="#切换分支：" class="headerlink" title="切换分支："></a>切换分支：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git switch name  或者 git checkout name</span><br></pre></td></tr></table></figure><h4 id="创建-切换分支："><a href="#创建-切换分支：" class="headerlink" title="创建+切换分支："></a>创建+切换分支：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b name  或者 git switch -c name</span><br></pre></td></tr></table></figure><h4 id="合并分支到主分支上："><a href="#合并分支到主分支上：" class="headerlink" title="合并分支到主分支上："></a>合并分支到主分支上：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge name</span><br></pre></td></tr></table></figure><h4 id="删除分支："><a href="#删除分支：" class="headerlink" title="删除分支："></a>删除分支：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch -d name       删除本地分支</span><br><span class="line">git push origin -d name  删除远程分支</span><br></pre></td></tr></table></figure><h4 id="提交结果到远端分支上："><a href="#提交结果到远端分支上：" class="headerlink" title="提交结果到远端分支上："></a>提交结果到远端分支上：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">切换到dev上：</span><br><span class="line">git push origin dev:dev  # 第一个dev是近端的分支，第二个dev是远端的分支</span><br></pre></td></tr></table></figure><h3 id="冲突处理"><a href="#冲突处理" class="headerlink" title="冲突处理"></a>冲突处理</h3><p>当两个分支同时对一个文件进行修改之后，执行<code>git merge dev</code>会发生冲突。在文本中直接列出了冲突的地方：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">天灰灰，会不会</span><br><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</span><br><span class="line">叫你忘记我是谁</span><br><span class="line">=======</span><br><span class="line">让你你忘记我是谁</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt; dev</span><br></pre></td></tr></table></figure><p>git直接在文中标注了产生冲突的地方，直接在文中修改，然后add,commit 即可消除冲突。</p><h3 id="分支策略"><a href="#分支策略" class="headerlink" title="分支策略"></a>分支策略</h3><p>当我们用<code>git merge dev</code>的时候，系统默认选择Fast Forward的形式进行merge，这种merge方式不留下任何的commit信息，可能对协作开发不利，因此我们禁用这种方式。</p><p>用新分支dev做完修改之后，切换回main进行merge：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge --no-ff -m &quot;merge with no-ff&quot; dev</span><br></pre></td></tr></table></figure><p>其中参数：–no–ff 禁用Fast Forward，-m为commit消息，dev为合并的分支.</p><p>可以用这个指令查看记录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log --graph --pretty=oneline --abbrev-commit</span><br></pre></td></tr></table></figure><p>输出为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">*   6a4c6b7 (HEAD -&gt; main) add with no ff</span><br><span class="line">|\</span><br><span class="line">| * e82698b (dev) change dev</span><br><span class="line">|/</span><br></pre></td></tr></table></figure><h4 id="分支原则"><a href="#分支原则" class="headerlink" title="分支原则"></a>分支原则</h4><p>在分支开发的过程中，需要遵守基本原则：</p><ol><li>保持主分支的稳定，仅用来发布新版本</li><li>干活在dev分支上</li><li>成员在各自的分支上干活，然后提交到dev分支上</li><li>dev 最终提交到master上</li></ol><h4 id="如何从dev1分支push到dev分支-解决3-："><a href="#如何从dev1分支push到dev分支-解决3-：" class="headerlink" title="如何从dev1分支push到dev分支(解决3)："></a>如何从dev1分支push到dev分支(解决3)：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin dev1:dev</span><br></pre></td></tr></table></figure><h4 id="拉取远端分支到本地（解决3中远端与本地不同的问题）："><a href="#拉取远端分支到本地（解决3中远端与本地不同的问题）：" class="headerlink" title="拉取远端分支到本地（解决3中远端与本地不同的问题）："></a>拉取远端分支到本地（解决3中远端与本地不同的问题）：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">切换到dev分支上：</span><br><span class="line">git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;</span><br><span class="line">git pull origin dev:dev</span><br></pre></td></tr></table></figure><h3 id="bug-分支"><a href="#bug-分支" class="headerlink" title="bug 分支"></a>bug 分支</h3><p>当我们遇到bug的时候，需要单独开一个分支解决这个bug。但是目前眼下分支的工作还没做完，我们希望先修改bug，因此需要把工作暂存起来。</p><h4 id="git-stash"><a href="#git-stash" class="headerlink" title="git stash"></a>git stash</h4><p>这个指令将当前分支的工作保存起来，得以后恢复现场后继续工作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout dev</span><br><span class="line">git stash</span><br></pre></td></tr></table></figure><p>然后开一个分支修复bug，修复完进行merge与普通branch一样的操作。当我们将bug解决完之后，需要继续之前没有完成的工作。</p><h4 id="git-stash-list"><a href="#git-stash-list" class="headerlink" title="git stash list"></a>git stash list</h4><p>查询保存的记录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout dev</span><br><span class="line">git stash list</span><br></pre></td></tr></table></figure><h4 id="git-stash-pop"><a href="#git-stash-pop" class="headerlink" title="git stash pop"></a>git stash pop</h4><p>恢复保存的记录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash pop</span><br></pre></td></tr></table></figure><p>现在的问题是，master上改了bug，但是分支上没改，好在github提供了cherry-pick使我们能够复制一个特定的提交到当前分支。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git cherry-pick 4c805e2</span><br></pre></td></tr></table></figure><h3 id="删除一个未被merge的分支"><a href="#删除一个未被merge的分支" class="headerlink" title="删除一个未被merge的分支"></a>删除一个未被merge的分支</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -D dev</span><br></pre></td></tr></table></figure><h2 id="多人协作"><a href="#多人协作" class="headerlink" title="多人协作"></a>多人协作</h2><h3 id="查看远程信息"><a href="#查看远程信息" class="headerlink" title="查看远程信息"></a>查看远程信息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote</span><br></pre></td></tr></table></figure><h3 id="推送分支"><a href="#推送分支" class="headerlink" title="推送分支"></a>推送分支</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git push origin master</span><br><span class="line"></span><br><span class="line">推送到其他分支：</span><br><span class="line">git push origin dev</span><br></pre></td></tr></table></figure><h3 id="多人的工作模式"><a href="#多人的工作模式" class="headerlink" title="多人的工作模式"></a>多人的工作模式</h3><p>如果同时你和一个伙伴，在各自的分支上，同时修改的某个文件，将会引起冲突，多人工作的情况下可以按照下面的步骤进行：</p><ol><li>首先尝试用<code>git push origin branch_name</code>看看是否可以直接上传</li><li>如果推送失败则证明远程版本比本地版本要新，需要用<code>git pull</code> 进行合并</li><li><code>git pull</code> 如果有冲突，需要远程分支名字和本地分支需要对应，执行<code>git branch --set-upstream-to=origin/dev dev</code> ，然后在pull这个结果</li><li>手动解决冲突之后在合并，最后提交</li></ol><h3 id="rebase"><a href="#rebase" class="headerlink" title="rebase"></a>rebase</h3><p>由于多人协作，存在提交历史记录交叉，因此历史记录非常的混乱，因此使用rebase可以整理历史记录。使得时间线变成一条直线。是我们查看历史提交变化时比较方便。</p><h3 id="输出清晰的log"><a href="#输出清晰的log" class="headerlink" title="输出清晰的log"></a>输出清晰的log</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log --graph --pretty=oneline --abbrev-commit</span><br></pre></td></tr></table></figure><h2 id="打标签"><a href="#打标签" class="headerlink" title="打标签"></a>打标签</h2><p>标签的含义是给不同的commit起一个别名。</p><ul><li>命令<code>git tag &lt;tagname&gt;</code>用于新建一个标签，默认分支为当前所在分支，也可以指定一个commit id；</li><li>命令<code>git tag -a &lt;tagname&gt; -m &quot;blablabla...&quot;</code>可以指定标签信息；</li><li>命令<code>git tag</code>可以查看所有标签。</li></ul><p>删除标签：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git tag -d v0.1 # 本地</span><br><span class="line">git push origin :refs/tags/v0.9 # 远程</span><br></pre></td></tr></table></figure><h2 id="大型项目模式"><a href="#大型项目模式" class="headerlink" title="大型项目模式"></a>大型项目模式</h2><p>采取建立分支-commit-push-Pull Request-merge的弯弯绕方式</p><p>四条为什么分支-PR比直接push到master好的理由：</p><ul><li>通过PR可以保证代码质量</li><li>通过PR可以缓解多人合作的冲突问题</li><li>在自己的分支中可以修改历史</li><li>通过PR代码的更新含有更丰富的上下文</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;github-指令介绍&quot;&gt;&lt;a href=&quot;#github-指令介绍&quot; class=&quot;headerlink&quot; title=&quot;github 指令介绍&quot;&gt;&lt;/a&gt;github 指令介绍&lt;/h1&gt;&lt;h2 id=&quot;git的原理&quot;&gt;&lt;a href=
      
    
    </summary>
    
      <category term="推荐系统" scheme="https://wenhui-zhou.github.io/categories/%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/"/>
    
    
  </entry>
  
  <entry>
    <title>C++ STL library</title>
    <link href="https://wenhui-zhou.github.io/2020/09/28/C-STL-library/"/>
    <id>https://wenhui-zhou.github.io/2020/09/28/C-STL-library/</id>
    <published>2020-09-28T13:08:04.000Z</published>
    <updated>2020-09-28T13:17:25.691Z</updated>
    
    <content type="html"><![CDATA[<p>C++ STL库是一套功能强大的模板库，提供通用的模板库和函数，可以实现诸如向量，链表，队列，栈等功能。</p><a id="more"></a><h3 id="常用的基本组件"><a href="#常用的基本组件" class="headerlink" title="常用的基本组件"></a>常用的基本组件</h3><p><strong>容器：</strong> 管理数据的集合，如vector，map，list，deque</p><p><strong>迭代器：</strong>提供访问容器的方法</p><p><strong>算法：</strong> 操作容器，例如sort，find，reverse</p><h4 id="顺序容器"><a href="#顺序容器" class="headerlink" title="顺序容器"></a>顺序容器</h4><p><strong>vector</strong></p><p>可变数组，支持快速随机访问，在尾部可以插入或删除元素。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;C++ STL库是一套功能强大的模板库，提供通用的模板库和函数，可以实现诸如向量，链表，队列，栈等功能。&lt;/p&gt;
    
    </summary>
    
      <category term="effective cpp" scheme="https://wenhui-zhou.github.io/categories/effective-cpp/"/>
    
    
  </entry>
  
  <entry>
    <title>海量地震数据超分辨率恢复及三维可视化的细枝末节</title>
    <link href="https://wenhui-zhou.github.io/2020/07/18/%E6%B5%B7%E9%87%8F%E5%9C%B0%E9%9C%87%E6%95%B0%E6%8D%AE%E8%B6%85%E5%88%86%E8%BE%A8%E7%8E%87%E6%81%A2%E5%A4%8D%E5%8F%8A%E4%B8%89%E7%BB%B4%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    <id>https://wenhui-zhou.github.io/2020/07/18/海量地震数据超分辨率恢复及三维可视化/</id>
    <published>2020-07-18T05:14:20.000Z</published>
    <updated>2020-07-18T16:13:48.035Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="welcome to my blog,enter password to read." />    <label for="pass">welcome to my blog,enter password to read.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      welcome to my blog,enter password to read.
    
    </summary>
    
      <category term="面试准备" scheme="https://wenhui-zhou.github.io/categories/%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/"/>
    
    
  </entry>
  
</feed>
