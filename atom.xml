<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>WenHuiZhou</title>
  
  <subtitle>perper（打起精神！）</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://wenhui-zhou.github.io/"/>
  <updated>2019-11-02T07:30:42.862Z</updated>
  <id>https://wenhui-zhou.github.io/</id>
  
  <author>
    <name>WenHuiZhou</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>推荐系统之协同过滤（一）</title>
    <link href="https://wenhui-zhou.github.io/2019/11/02/%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F%E4%B9%8B%E5%8D%8F%E5%90%8C%E8%BF%87%E6%BB%A4%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>https://wenhui-zhou.github.io/2019/11/02/推荐系统之协同过滤（一）/</id>
    <published>2019-11-02T05:34:08.000Z</published>
    <updated>2019-11-02T07:30:42.862Z</updated>
    
    <content type="html"><![CDATA[<p>基于领域的算法是推荐系统中最为基本的算法，这篇post主要针对其中重要的两类算法：基于用户的协同过滤，基于产品的协同过滤进行介绍。</p><a id="more"></a><h3 id="长尾效应"><a href="#长尾效应" class="headerlink" title="长尾效应"></a>长尾效应</h3><p>在需求曲线中，少量的需求会形成一条长长的尾巴，将所有非流行的需要累加起来，将会形成一个比流行市场还要庞大的市场。</p><p>长尾效应最直接的原因就是强调用户的个性化，将市场需求细分，这些小的需求市场的累积效应将形成巨大的理论。</p><p>推荐系统的一个迫切需求在于，存在信息过载以及用户需求不明显的问题，因此需要将用户感兴趣，或有潜在兴趣的商品推荐给用户。</p><h3 id="实验设计"><a href="#实验设计" class="headerlink" title="实验设计"></a>实验设计</h3><p>在介绍协同过滤之前，我们粗略设计一下算法的流程。</p><ul><li>将用户数据均匀成M（m = 8）份，挑选其中一份作为测试集。重复进行M次实验。（交叉验证，防止过拟合）</li><li>在训练集上训练用户兴趣模型，在测试集上进行预测，统计评测指标。</li><li>将M次实验结果的平均值作为最后的测评指标。</li></ul><h3 id="测评指标"><a href="#测评指标" class="headerlink" title="测评指标"></a>测评指标</h3><ul><li>召回率：recall = (用户感兴趣 与 推荐商品交集) / （推荐商品的总数）</li><li>准确率：precision = (用户感兴趣 与 推荐商品交集) / （用户感兴趣物品集合）</li><li>覆盖率：coverage = （推荐商品） / （总商品）</li><li>平均流行度：每个物品流行度的对数值（流行度满足长尾，取对数更加的稳定）</li><li>新颖度：新颖度可由流行度度量，负相关。</li></ul><h3 id="基于用户的协同过滤算法"><a href="#基于用户的协同过滤算法" class="headerlink" title="基于用户的协同过滤算法"></a>基于用户的协同过滤算法</h3><p>基于用户的协同过滤算法是推荐算法中最古老的算法，在1992年被提出（很年轻的领域）。主要包括两个部分：</p><ul><li>找到和目标用户兴趣相似的用户集合</li><li>找到这个集合中用户喜欢的，但目标用户中没有产生过行为的，推荐给目标用户</li></ul><p><strong>找出目标用户兴趣群</strong></p><p>如何判断两个用户的相似性，可以使用用户感兴趣物体N(u)的相似性来代替用户的相似性，使用Jaccard相似度，计算u，v用户的相似度：<br>$$<br>w_{u v}=\frac{|N(u) \cap N(v)|}{|N(u) \cup N(v)|}<br>$$<br>或者使用余弦相似度计算：<br>$$<br>w_{u v}=\frac{|N(u) \cap N(v)|}{\sqrt{|N(u)||N(v)|}}<br>$$<br>在具体的计算时，我们只关注两个用户之间存在交集的那部分商品：</p><ul><li><p>首先建立一个<strong>商品为表头的链表，链表上的节点是对该商品发生过行为的用户。</strong></p></li><li><p>随后建立一个<strong>用户与用户之间的相似矩阵</strong>，如果这两个用户出现在同一个链表中k次，则用户之间的数组值为k。相似矩阵作为余弦相似度的分子，总数作为分母，计算得到用户之间的相似度。</p></li><li>给目标用户提供与他相似度topK用户喜欢的产品。</li></ul><p><strong>用户相似性的改进：</strong></p><p>对于一些热门的产品，大家可能都会去购买，比如面包大家都会买，但是购买用户之间的相似性就天差地别了，换句话说，<strong>冷门商品更能说明用户兴趣</strong>，因此需要对热门商品进行惩罚：<br>$$<br>w_{u v}=\frac{\sum_{i \in N(u) \cap N(v)} \frac{1}{\log (1+|N(i)|)}}{\sqrt{|N(u)||N(v)|}}<br>$$<br>分子是u，v用户共同感兴趣的物品i，N(i)表示对i发生过行为的所有人的集合，i越热门惩罚越大。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;基于领域的算法是推荐系统中最为基本的算法，这篇post主要针对其中重要的两类算法：基于用户的协同过滤，基于产品的协同过滤进行介绍。&lt;/p&gt;
    
    </summary>
    
      <category term="推荐系统" scheme="https://wenhui-zhou.github.io/categories/%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/"/>
    
    
  </entry>
  
  <entry>
    <title>effective cpp 1: 让自己习惯cpp</title>
    <link href="https://wenhui-zhou.github.io/2019/10/31/effective-cpp-1-%E8%AE%A9%E8%87%AA%E5%B7%B1%E4%B9%A0%E6%83%AFcpp/"/>
    <id>https://wenhui-zhou.github.io/2019/10/31/effective-cpp-1-让自己习惯cpp/</id>
    <published>2019-10-31T11:37:49.000Z</published>
    <updated>2019-11-02T05:34:44.194Z</updated>
    
    <content type="html"><![CDATA[<p>2019/10/31，effective cpp第一章：</p><ul><li>01条款：视c++为一个语言联邦</li><li>02条款：尽量以const, enum,inline替换 #define</li><li>03条款：尽可能使用 const</li><li>04条款：确定对象被使用前已被初始化</li></ul><a id="more"></a><h3 id="01-条款：视c-为一个语言联邦"><a href="#01-条款：视c-为一个语言联邦" class="headerlink" title="01 条款：视c++为一个语言联邦"></a>01 条款：视c++为一个语言联邦</h3><p>c++最初从c语言发展而来，最初的名称是c with classes，同时这们语言接受了很多的不同的观点，特性，和编程的设计。使得cpp有着巨大的弹性和威力，因此在cpp不同的语言领域内，将有不同的最优用法。</p><p>cpp有着四个主要的次语言：</p><ul><li>C语言，cpp很多编程上的特性继承至C语言</li><li>面向对象的C++：很多关于类的操作在这一部分引入</li><li>template C++：C++的范型编程，<strong>唯template适用</strong></li><li>STL：标准模板库，里头有着大量的容器，迭代器等</li></ul><p><strong>总结</strong></p><p>C++由上面四种次语言组成，不存在一组高效编程的守则，而是视适用的次语言而定。</p><h3 id="02-条款：-尽量以const-enum-inline替换-define"><a href="#02-条款：-尽量以const-enum-inline替换-define" class="headerlink" title="02 条款： 尽量以const, enum,inline替换 #define"></a>02 条款： 尽量以const, enum,inline替换 #define</h3><p>将cpp程序转化成机器能够看懂的语言，需要经过预处理，编译，汇编，链接这些步骤。<strong>#define</strong>在预处理阶段就会被处理：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#define RATIO 1.25</span><br></pre></td></tr></table></figure><p>在编译器处理源代码阶段，define定义的符号将会被移走，因此RATIO可能根本就没进入<strong>符号表。</strong>当出现错误的时候，根据报错信息将很难定位错误，因此最好将define进行替换，也就是<strong>编译器替换预处理器。</strong></p><p><strong>符号表</strong></p><p>符号表在程序的编译阶段，将函数以及变量名地址记录起来，在链接阶段，根据符号表中记录的内容，去链接程序。</p><p><strong>用const替换define</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> ratio = <span class="number">1.25</span>;</span><br></pre></td></tr></table></figure><p>由于常量的定义经常在头文件之中，因此定义常量指针的时候，通常也将指针定义成const。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* <span class="keyword">const</span> author = <span class="string">"names"</span>;</span><br></pre></td></tr></table></figure><p>当我们需要创建一个类的常量的时候，需要在声明的时候，加一个static，使得这个常量只有一份实体，而且将这个常量的定义域限制在类内。</p><p>最后可以使用enum来代替define：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span>&#123;num1 = <span class="number">1</span>,num2 = <span class="number">2</span>&#125;;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; num1 &lt;&lt; num2;</span><br></pre></td></tr></table></figure><p>enum将数字符号化，也无法取到enum的地址。</p><p>此外，使用宏定义的另外一部分作用是定义一个简单的函数，避免函数调用带来的麻烦，同时不必要制定变量的类型（需要是同一个类别的），在宏定义的时候，注意为我每一个变量添加一个括号。</p><p>但是我们完全没必要去定义define，而是使用inline去替代：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">callwith</span><span class="params">(<span class="keyword">const</span> T&amp; a ,<span class="keyword">const</span> T&amp; b)</span></span>&#123;</span><br><span class="line">  f(a&gt;b ? a:b); <span class="comment">// 谁大调用谁</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong></p><ul><li>对于单纯的变量，使用const，enum替换define</li><li>对于宏定义的函数，改成template + inline的形式</li></ul><h3 id="条款-03：尽可能使用-const"><a href="#条款-03：尽可能使用-const" class="headerlink" title="条款 03：尽可能使用 const"></a>条款 03：尽可能使用 const</h3><p>const的原则，<strong>你在可以使用它的时候就使用它</strong>，</p><p>const 是一个语义的束缚，说明内容不可修改，因此只要有这样的一种约束在，就应该声明出来，获得编译器的协助。</p><p>const声明指针的时候有以下几种方式：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> greeting[] = <span class="string">"hello"</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* p = greeting; <span class="comment">// 指针所指内容为const</span></span><br><span class="line"><span class="keyword">char</span> <span class="keyword">const</span>* p = greeting; <span class="comment">// const在*左边，与上相同</span></span><br><span class="line"><span class="keyword">char</span>* <span class="keyword">const</span> p = greeting; <span class="comment">// 指针为const，内容可变</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* <span class="keyword">const</span> p = greeting; <span class="comment">//指针，内容都不变</span></span><br></pre></td></tr></table></figure><p><strong>令函数的返回值为一个常量值，往往可以降低造成意外的风险</strong></p><p>函数的返回值，正常不应该作为一个变量来被其他赋值，因为这个不符合逻辑，如果可以被直接赋值的话，函数就没什么用了。因此对于大多数函数的返回值来说，可以加上const。</p><p><strong>const成员函数</strong></p><p>const成员函数指的是在一个类里头，这个函数用const进行了标注，表明这个函数是只读的不可以在函数内部对数据成员进行修改，格式如下,const在函数的最后：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span>&amp; <span class="keyword">operator</span>[](<span class="keyword">int</span> position) <span class="keyword">const</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> tex[position];</span><br><span class="line">  &#125;;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将函数定义成const，可以容易得知这个函数无法修改对象的值；同时使得操作const对象成为可能。</p><p><strong>真实程序中，const对象大多用于传参数，passed-by-pointer-to-const；passed-by-reference-to-const</strong>.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">point</span><span class="params">(cosnt TextBlock&amp; ctb)</span></span>&#123;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; ctb[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在一些类中，const标注的函数其内部不允许对成员数据进行修改，但是也存在例外，<strong>mutable</strong>变量定义的变量将改变一些值的const属性，允许在const函数中修改：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">block</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="keyword">mutable</span> <span class="keyword">int</span> len;</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">length</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> block::length() <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">  len = <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">return</span> len; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>const和non-const函数允许函数进行重载，</strong>但是在使用的时候应该避免写两个函数，而是在non-const函数中，通过类型的转换来调用const类型的函数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">block</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span>&amp; <span class="keyword">operator</span>[](<span class="keyword">int</span> position) <span class="keyword">const</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">char</span>&amp; <span class="keyword">operator</span>[](<span class="keyword">int</span> position)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">const_cast</span>&lt;<span class="keyword">char</span>&amp;&gt;(<span class="keyword">static_cast</span>&lt;cosnt block&amp;&gt;)(*<span class="keyword">this</span>)[position];</span><br><span class="line">    <span class="comment">// const_cast 去掉const</span></span><br><span class="line">    <span class="comment">// static_cast 将this转换为const类型，调用上一个函数</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong></p><ul><li>const可以施加于任何作用域内的对象，函数参数，返回值，成员函数。</li><li>在能够使用const的时候尽量使用const，利用编译器规则为你排除错误。</li><li>编译器强制实行bitwise constness，编写程序的时候应该遵守逻辑上的const（避免const函数，有些指针是const，但是其内部的值可以修改）。</li><li>const和非const函数有本质上的相似的话，应该使用non-const的版本去调用，避免代码重复。</li></ul><h3 id="条款-04：确定对象被使用前已被初始化"><a href="#条款-04：确定对象被使用前已被初始化" class="headerlink" title="条款 04：确定对象被使用前已被初始化"></a>条款 04：确定对象被使用前已被初始化</h3><p>明天来！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2019/10/31，effective cpp第一章：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;01条款：视c++为一个语言联邦&lt;/li&gt;
&lt;li&gt;02条款：尽量以const, enum,inline替换 #define&lt;/li&gt;
&lt;li&gt;03条款：尽可能使用 const&lt;/li&gt;
&lt;li&gt;04条款：确定对象被使用前已被初始化&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="effective cpp" scheme="https://wenhui-zhou.github.io/categories/effective-cpp/"/>
    
    
  </entry>
  
  <entry>
    <title>FastFCN: 大工不巧</title>
    <link href="https://wenhui-zhou.github.io/2019/10/31/FastFCN-%E5%A4%A7%E5%B7%A5%E4%B8%8D%E5%B7%A7/"/>
    <id>https://wenhui-zhou.github.io/2019/10/31/FastFCN-大工不巧/</id>
    <published>2019-10-31T08:33:31.000Z</published>
    <updated>2019-11-01T06:48:38.559Z</updated>
    
    <content type="html"><![CDATA[<p>FastFCN是自动化所2019年cvpr上的一个工作，提出JPU模块，代替dilated conv，在保证网络精度的前提下，大大降低网络的计算复杂度，是的FPS得到提升。</p><p>这些年来计算机视觉得到广泛的发展，网络结构也越来越复杂，这篇文章做了一些下修改，可以说耳目一新，结构十分简单，结果十分有效。</p><a id="more"></a><h3 id="语义分割常用的提取feature-map"><a href="#语义分割常用的提取feature-map" class="headerlink" title="语义分割常用的提取feature map"></a>语义分割常用的提取feature map</h3><p><img src="../images/3D/fcn_struct.png" style="zoom:80%;"></p><p><strong>a）FCN结构：</strong>通过一个全卷积的网络，直接得到图像分割后的结果。缺点是图像中的特征丢失。</p><p><strong>b）encoder-decoder结构：</strong>encoder结构得到高层次的特征，decoder阶段通过结合多层次的特征来得到一个多尺度融合的feature map，缺点是仍然存在数据的丢失（pooling 结构）</p><p><strong>c） DilatedFCN：</strong>利用空洞卷积替换pooling层，扩大feature map感受野的同时，没有降低feature map的分辨率。但是这种结构导致了很大的计算量。</p><p>###JPU结构</p><p>作者提出JPU（joint pyramid upsampling）结构，替换DilateFCN中的空洞卷积结构，能够大大的减少内存以及时间上的消耗。</p><p><img src="../images/jpu.png" alt="image-20191101134143826" style="zoom:60%;"></p><p>###FastFCN结构 </p><p><img src="../images/fastfcn.png" alt="image-20191101134311586" style="zoom:50%;"></p><p>FastFCN的backbone采用的是原始的FCN的结构，将FCN的最后三层输入JPU模块中进行训练，最终在许多任务上都得到一个性能一致，但速度得到提升的网络。</p><p><strong>mIoU：</strong>对每一类计算真实标签和预测标签的交并比，然后对所有类别求一个平均得到最后的结果。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这篇文章对FCN的网络中的dilated conv进行了一个很小的修改，达到一个比较合理的结果，文章非常的简单，不过可能是因为过于简单的原因，文中也有许多可有可无的内容，总之，对于做工程来说，得到一个FPS比较快的网络还是比较好的。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;FastFCN是自动化所2019年cvpr上的一个工作，提出JPU模块，代替dilated conv，在保证网络精度的前提下，大大降低网络的计算复杂度，是的FPS得到提升。&lt;/p&gt;
&lt;p&gt;这些年来计算机视觉得到广泛的发展，网络结构也越来越复杂，这篇文章做了一些下修改，可以说耳目一新，结构十分简单，结果十分有效。&lt;/p&gt;
    
    </summary>
    
    
      <category term="论文阅读" scheme="https://wenhui-zhou.github.io/tags/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title>关于职业生涯规划以及时间安排的一些思考</title>
    <link href="https://wenhui-zhou.github.io/2019/10/30/%E5%85%B3%E4%BA%8E%E8%81%8C%E4%B8%9A%E7%94%9F%E6%B6%AF%E8%A7%84%E5%88%92%E4%BB%A5%E5%8F%8A%E6%97%B6%E9%97%B4%E5%AE%89%E6%8E%92%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/"/>
    <id>https://wenhui-zhou.github.io/2019/10/30/关于职业生涯规划以及时间安排的一些思考/</id>
    <published>2019-10-29T17:19:56.000Z</published>
    <updated>2019-10-29T18:00:24.995Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="welcome to my blog,enter password to read." />    <label for="pass">welcome to my blog,enter password to read.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      welcome to my blog,enter password to read.
    
    </summary>
    
    
      <category term="职业规划" scheme="https://wenhui-zhou.github.io/tags/%E8%81%8C%E4%B8%9A%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>编译器gcc，g++，clang，cmake，make介绍</title>
    <link href="https://wenhui-zhou.github.io/2019/10/27/%E7%BC%96%E8%AF%91%E5%99%A8gcc%EF%BC%8Cg-%EF%BC%8Cclang%EF%BC%8Ccmake%EF%BC%8Cmake%E4%BB%8B%E7%BB%8D/"/>
    <id>https://wenhui-zhou.github.io/2019/10/27/编译器gcc，g-，clang，cmake，make介绍/</id>
    <published>2019-10-27T13:22:52.000Z</published>
    <updated>2019-10-28T11:07:20.931Z</updated>
    
    <content type="html"><![CDATA[<p>这篇post主要介绍在mac上使用CLion编写cpp代码的时候，cpp编译以及链接的一些知识。</p><a id="more"></a><h3 id="cpp程序编译执行过程"><a href="#cpp程序编译执行过程" class="headerlink" title="cpp程序编译执行过程"></a>cpp程序编译执行过程</h3><ul><li><strong>编译</strong>：将源代码翻译成机器语言，生成目标文件<ul><li>预处理：拷贝#include 文件代码，#define 宏定义的替换 ，处理条件编译指令 （#ifndef #ifdef #endif）等，输出.i文件。</li><li>编译优化：进行cpp词法语法分析，确定所有指令是否符合规则，后翻译成汇编代码文件.s。</li><li>汇编：将汇编代码翻译成目标机器代码.o文件。</li></ul></li><li><strong>链接</strong>：由于目标文件调用了其他源文件，因此这一步需要将有关的源文件链接起来，生成.exe。</li></ul><h3 id="cpp使用的编译器gcc，g-，clang"><a href="#cpp使用的编译器gcc，g-，clang" class="headerlink" title="cpp使用的编译器gcc，g++，clang"></a><strong>cpp使用的编译器gcc，g++，clang</strong></h3><ul><li><strong>gcc</strong>: 最开始的时候是 GNU C Compiler, 如你所知，就是一个c编译器。但是后来因为这个项目里边集成了更多其他不同语言的编译器，GCC就代表 the GNU Compiler Collection，所以表示一堆编译器的合集。</li><li><strong>g++</strong>：是GCC的c++编译器。</li><li><strong>clang</strong>：是mac上另起炉灶写的一个C语言、C++、Objective-C、Objective-C++语言的<strong>轻量级编译器</strong>。源代码发布于BSD协议下。Clang将支持其普通lambda表达式、返回类型的简化处理以及更好的处理constexpr关键字。</li></ul><p><strong>clang和gcc相比比gcc编译速度更快一些，而且错误提示更人性化。</strong></p><h3 id="make，cmake"><a href="#make，cmake" class="headerlink" title="make，cmake"></a>make，cmake</h3><p>光有gcc还不够，如果这时候我们开发的工程使用的文件很多，那就需要一个一个去编译，工作量很大。一些大型的IDE如VS studio，CLion使用clang编译器，使用cmake链接工具，对源码进行编译。</p><p><strong>make</strong></p><p>make类似于一个目录，是一个文件编译的批处理工具，本身没有编译的功能。make的作用就是告诉编译器，各种各样的编译规则，先做什么后做什么，这些规则写在makefile文件中。</p><p>make用于构建项目，其中一条很重要的规则就是依赖关系，当某些文件发生改变，直接或间接依赖这些文件的目标就要进行重新的构建。make用来构建管理文件，不一定用于编译。</p><p><strong>cmake</strong></p><p>构建一个项目需要了解构建的规则，并写出makefile文件，但是编译构建本身是个复杂过程，不同的项目构建规则会有所不同，要自己写出一个makefile文件比较困难。</p><p>cmake工具是根据平台（跨平台）和配置自动生成项目的makefile文件，然后给make使用。</p><p>cmake根据CMakeLists.txt文件（组态档）去生成makefile。在不使用CLion等这类IDE的情况下，这个CMakeLists.txt需要自己来写，下面是一个CMakeLists.txt：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.8</span>)</span><br><span class="line"><span class="keyword">project</span>(First_Code)</span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_STANDARD <span class="number">11</span>)</span><br><span class="line"><span class="comment">#set(CMAKE_CXX_FLAGS "-std=c++0x $&#123;CMAKE_CXX_FLAGS&#125; -g -ftest-coverage -fprofile-arcs")</span></span><br><span class="line"><span class="comment">#set(CMAKE_CXX_FLAGS "$&#123;CMAKE_CXX_FLAGS&#125; -std=c++11")</span></span><br><span class="line"><span class="keyword">set</span>(SOURCE_FILES main.cpp <span class="keyword">test</span>.cpp assignment.cpp)</span><br><span class="line"><span class="keyword">add_executable</span>(First_Code <span class="variable">$&#123;SOURCE_FILES&#125;</span>)</span><br></pre></td></tr></table></figure><p>但是不用担心，CMakeLists.txt IDE也会负责生成。</p><h3 id="C-11"><a href="#C-11" class="headerlink" title="C++11"></a>C++11</h3><p>  C++11，（即ISO/IEC 14882:2011），是目前的C++编程语言的最新正式标准。它取代了第二版标准(第一版公开于1998年，第二版于2003年更新，分别通称C++98以及C++03，两者差异很小)。新的标准包含核心语言的新机能，而且扩展C++标准程序库。C++11新标准由C++标准委员会于2011年8月12日公布，并于2011年9月出版。此次标准为C++98发布后13年来第一次重大修正。</p><p><strong>gcc4.7以及之后，全面支持c++11。</strong></p><h3 id="MAC更换CLion编译器"><a href="#MAC更换CLion编译器" class="headerlink" title="MAC更换CLion编译器"></a>MAC更换CLion编译器</h3><p>在terminal输入<code>gcc -v</code>发现出来的是APPLE的clang编译器，由于更习惯使用GUN的gcc编译器，因此打算安装一个，同时保留原有的clang。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew search gcc // 查看有哪些gcc</span><br><span class="line">brew install gcc //安装最新版本的gcc，目前电脑上用的是gcc9.2</span><br></pre></td></tr></table></figure><p>上诉过程安装完成之后，gcc的位置在：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/Cellar/gcc/9.2.0_1/bin</span><br></pre></td></tr></table></figure><p>将这个路径加入到CLion所使用的编译器上，同时修改cmake参数(preference 中修改)：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-D CMAKE_CXX_COMPILER=/usr/local/bin/g++-9</span><br></pre></td></tr></table></figure><h3 id="CLion-中新建项目的目录结构"><a href="#CLion-中新建项目的目录结构" class="headerlink" title="CLion 中新建项目的目录结构"></a>CLion 中新建项目的目录结构</h3><p>CLion是通过cmake来构建文件的，手动在CLion中生成cpp文件，系统件制动修改cmakeLists.txt</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这篇post主要介绍在mac上使用CLion编写cpp代码的时候，cpp编译以及链接的一些知识。&lt;/p&gt;
    
    </summary>
    
    
      <category term="learning cpp" scheme="https://wenhui-zhou.github.io/tags/learning-cpp/"/>
    
  </entry>
  
</feed>
